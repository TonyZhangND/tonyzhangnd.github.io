<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://tonyzhangnd.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://tonyzhangnd.github.io/" rel="alternate" type="text/html" /><updated>2023-12-15T00:30:25-05:00</updated><id>https://tonyzhangnd.github.io/feed.xml</id><title type="html">Tony Zhang</title><subtitle>Personal website of Tony Nuda Zhang. PhD student at University of Michigan -- Ann Arboor (UMich)</subtitle><author><name>Nuda &quot;Tony&quot; Zhang</name><email>nudzhang@umich.edu</email></author><entry><title type="html">GoOvid – Software-Defined Distributed Systems</title><link href="https://tonyzhangnd.github.io/2019/09/GoOvid.html" rel="alternate" type="text/html" title="GoOvid – Software-Defined Distributed Systems" /><published>2019-09-26T00:00:00-04:00</published><updated>2019-09-26T00:00:00-04:00</updated><id>https://tonyzhangnd.github.io/2019/09/GoOvid</id><content type="html" xml:base="https://tonyzhangnd.github.io/2019/09/GoOvid.html"><![CDATA[<p>Configuring and deploying distributed systems might be a difficult task, but it doesn’t have to be this way. 
<a href="https://www.usenix.org/system/files/conference/hotcloud16/hotcloud16_altinbuken.pdf">Ovid</a> is a contained-based framework for composing distributed services that aimed to simplify such endeavours.</p>

<p>This post introduces GoOvid (<a href="https://github.com/TonyZhangND/GoOvid">open-source github link</a>) – a complete redesign of the original Ovid written in Go.
I started this as a side project before I stareted my PhD to learn writing Go and gain some practice building prototype systems. It is work in progress, and it does not yet have the full capabilities of Ovid, such as dynamic reconfiguration. However, GoOvid is in a useful state where it can host arbitrary agents and protocols. A README can be found on the github page, so I will avoid rambling about its usage here. You are welcome to take a look, and contact me regarding any questions or comments!</p>]]></content><author><name>Nuda &quot;Tony&quot; Zhang</name><email>nudzhang@umich.edu</email></author><category term="tutorial" /><category term="web" /><category term="distributed systems" /><summary type="html"><![CDATA[Introducing GoOvid, a program for rapid prototyping and deployment of distributed systems]]></summary></entry><entry><title type="html">Tutorial - Integrating Jekyll and Travis CI</title><link href="https://tonyzhangnd.github.io/2018/06/Integrating-Jekyll-and-Travis-CI.html" rel="alternate" type="text/html" title="Tutorial - Integrating Jekyll and Travis CI" /><published>2018-06-27T00:00:00-04:00</published><updated>2018-06-27T00:00:00-04:00</updated><id>https://tonyzhangnd.github.io/2018/06/Integrating%20Jekyll%20and%20Travis%20CI</id><content type="html" xml:base="https://tonyzhangnd.github.io/2018/06/Integrating-Jekyll-and-Travis-CI.html"><![CDATA[<aside class="sidebar__right">
<nav class="toc">
    <header><h4 class="nav__title"><i class="fas fa-file-alt"></i> Table of Contents</h4></header>
<ul class="toc__menu" id="markdown-toc">
  <li><a href="#why-travis-ci" id="markdown-toc-why-travis-ci">Why Travis CI?</a></li>
  <li><a href="#tutorial" id="markdown-toc-tutorial">Tutorial</a>    <ul>
      <li><a href="#1-accounts-and-permissions" id="markdown-toc-1-accounts-and-permissions">1. Accounts and Permissions</a></li>
      <li><a href="#2-travis-yaml-file" id="markdown-toc-2-travis-yaml-file">2. Travis YAML file</a></li>
      <li><a href="#3-build-script" id="markdown-toc-3-build-script">3. Build Script</a></li>
    </ul>
  </li>
  <li><a href="#voilà" id="markdown-toc-voilà">Voilà!</a></li>
</ul>

  </nav>
</aside>

<p>Recently, I had to setup this entire website all over again because how I had first done so was causing issues with upgrading its themes. While migrating to a new repo was a bearable task, what took some fumbling was hooking it back up with Travis CI, the continuous integration tool I use to automatically build and deploy this site. So to save ourselves from crawling over documentation all over again, this post will be a tutorial of how to deploy a Jekyll website to GitHub Pages using Travis CI. If you are not already familiar with Jekyll and GitHub pages, here is some great <a href="https://jekyllrb.com">documentation</a>.</p>

<p><img src="/assets/images/travis-jekyll/banner.png" alt="" /></p>

<h2 id="why-travis-ci">Why Travis CI?</h2>

<p>Before we dive into the mechanics, it helps to understand why we want to use Travis CI with Jekyll and GitHub Pages. Indeed, GitHub Pages is capable of building your Jekyll website from its source repo. The catch, however, is that GitHub is wary of executing third-party Ruby plugins. One way around this is to first build your site locally, and GitHub pages will happily deploy the pushed result. But Travis CI helps us avoid this extra step – by hooking it up with our source repo, Travis CI can automatically build it and push it to a deployment repo whenever there is an update. We also won’t have to maintain a “_site/” directory in the source repo. Neat!</p>

<h2 id="tutorial">Tutorial</h2>

<p>For the purpose of this tutorial, I assume that <code class="language-plaintext highlighter-rouge">alice/website_source</code> is the source repository for our website, and we want to deploy to the repo <code class="language-plaintext highlighter-rouge">alice/alice.github.io</code>.</p>

<h3 id="1-accounts-and-permissions">1. Accounts and Permissions</h3>

<p>The first step is to create an account on Travis and link it with your GitHub account. You should then see a list of your GitHub repositories in your Travis home page. Simply click on the toggle to activate Travis for <code class="language-plaintext highlighter-rouge">alice/website_source</code>.</p>

<p>Crucially, we now want to give Travis permission to pull and push to your GitHub repos. To do so:</p>

<ol>
  <li>Go to the Settings page on GitHub (hint: click on your profile picture on the top right corner). Click on “Developer Settings” in the left pane, and then “Personal Access Tokens”.</li>
  <li>Generate a new token and set its authorization scope. The ‘repo’ scope is sufficient for our purposes. Copy the generated token.</li>
  <li>We now want to save this token as an Environment Variable in Travis. In Travis CI, go to the settings for <code class="language-plaintext highlighter-rouge">alice/website_source</code>.</li>
  <li>Under the “Environment Variables” section, paste your token into the “value” field, and give it a name. Remember this name as it will be needed later. Let’s call it <code class="language-plaintext highlighter-rouge">MY_WEBSITE</code>.</li>
</ol>

<p><img src="/assets/images/travis-jekyll/EnvironmentVariables.png" alt="Saving your personal access token to Travis CI" /></p>

<h3 id="2-travis-yaml-file">2. Travis YAML file</h3>

<p>In the root directory of your source repo, you need to include a file called “.travis.yml”. This instructs Travis what to do at each stage of the job lifecycle. Details can be found <a href="https://docs.travis-ci.com/user/customizing-the-build">here</a>, but for now, this is the file we want to have:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">language</span><span class="pi">:</span> <span class="s">ruby</span>

<span class="na">cache</span><span class="pi">:</span> <span class="s">bundler</span> 

<span class="na">before_install</span><span class="pi">:</span> <span class="s">gem update bundler</span>

<span class="na">install</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">bundle install</span>

<span class="na">script</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">./setup"</span>

<span class="na">branches</span><span class="pi">:</span>
  <span class="na">only</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">build</span>

<span class="na">sudo</span><span class="pi">:</span> <span class="kc">false</span>
</code></pre></div></div>

<p>This tells Travis the following:</p>

<ol>
  <li>This is a Ruby project.</li>
  <li>Cache the Bundler output to reduce log clutter.</li>
  <li>Run <code class="language-plaintext highlighter-rouge">gem update bundler</code> and then <code class="language-plaintext highlighter-rouge">bundle install</code>, to make sure we are using the latest gems.</li>
  <li>Run the “setup” script, which we shall soon write.</li>
  <li>Only build from the <code class="language-plaintext highlighter-rouge">build</code> branch of <code class="language-plaintext highlighter-rouge">alice/website_source</code>.</li>
</ol>

<p>I find the last point useful in maintaining an always-working <code class="language-plaintext highlighter-rouge">master</code> branch, by  avoiding pushing new changes to my <code class="language-plaintext highlighter-rouge">master</code> branch only to later have Travis tell me that it breaks the build.</p>

<h3 id="3-build-script">3. Build Script</h3>

<p>Finally, we write the “setup” script that we want Travis CI to run whenever we push a change to “alice/website_source”. This is the script in the <code class="language-plaintext highlighter-rouge">./setup</code> command we specified in the YAML file. The script and explanation I present here is credited to <a href="http://pauldambra.github.io/using-travis-to-build-jekyll.html">Paul D’Ambra</a>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set</span> <span class="nt">-e</span>

<span class="nv">DEPLOY_REPO</span><span class="o">=</span><span class="s2">"https://</span><span class="k">${</span><span class="nv">MY_WEBSITE</span><span class="k">}</span><span class="s2">@github.com/alice/alice.github.io.git"</span>

<span class="k">function </span>main <span class="o">{</span>
	clean
	get_current_site
	build_site
	deploy
<span class="o">}</span>

<span class="k">function </span>clean <span class="o">{</span> 
	<span class="nb">echo</span> <span class="s2">"cleaning _site folder"</span>
	<span class="k">if</span> <span class="o">[</span> <span class="nt">-d</span> <span class="s2">"_site"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then </span><span class="nb">rm</span> <span class="nt">-Rf</span> _site<span class="p">;</span> <span class="k">fi</span> 
<span class="o">}</span>

<span class="k">function </span>get_current_site <span class="o">{</span> 
	<span class="nb">echo</span> <span class="s2">"getting latest site"</span>
	git clone <span class="nt">--depth</span> 1 <span class="nv">$DEPLOY_REPO</span> _site 
<span class="o">}</span>

<span class="k">function </span>build_site <span class="o">{</span> 
	<span class="nb">echo</span> <span class="s2">"building site"</span>
	bundle <span class="nb">exec </span>jekyll build <span class="nt">--trace</span>
<span class="o">}</span>

<span class="k">function </span>deploy <span class="o">{</span>
	<span class="nb">echo</span> <span class="s2">"deploying changes"</span>

	<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$TRAVIS_PULL_REQUEST</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
	    </span><span class="nb">echo</span> <span class="s2">"except don't publish site for pull requests"</span>
	    <span class="nb">exit </span>0
	<span class="k">fi  

	if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$TRAVIS_BRANCH</span><span class="s2">"</span> <span class="o">!=</span> <span class="s2">"build"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
	    </span><span class="nb">echo</span> <span class="s2">"except we should only publish the build branch. stopping here"</span>
	    <span class="nb">exit </span>0
	<span class="k">fi

	</span><span class="nb">cd </span>_site
	git config <span class="nt">--global</span> user.name <span class="s2">"Travis CI"</span>
    git config <span class="nt">--global</span> user.email alice@example.com
	git add <span class="nt">-A</span>
	git status
	git commit <span class="nt">-m</span> <span class="s2">"Lastest site built on successful travis build </span><span class="nv">$TRAVIS_BUILD_NUMBER</span><span class="s2"> auto-pushed to github"</span>
	git push <span class="nv">$DEPLOY_REPO</span> master:master
<span class="o">}</span>

main
</code></pre></div></div>

<p>First, the script sets the variable <code class="language-plaintext highlighter-rouge">DEPLOY_REPO="https://${MY_WEBSITE}@github.com/alice/alice.github.io.git"</code>, where <code class="language-plaintext highlighter-rouge">MY_WEBSITE</code> is the name of the Environment Variable we set in Travis in step 1.4.</p>

<p>Next, the script runs four functions in sequence:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">clean</code>: delete the “_site/” directory if it exists.</li>
  <li><code class="language-plaintext highlighter-rouge">get_current_site</code>: clone the latest revision of the deployment repository into “_site/”.</li>
  <li><code class="language-plaintext highlighter-rouge">build_site</code>: run Jekyll build.</li>
  <li><code class="language-plaintext highlighter-rouge">deploy</code>:
    <ul>
      <li>Don’t deploy pull requests, and deploy only the <code class="language-plaintext highlighter-rouge">build</code> branch.</li>
      <li>Push the built site into the deployment repo.</li>
    </ul>
  </li>
</ol>

<h2 id="voilà">Voilà!</h2>

<p><img src="/assets/images/travis-jekyll/result.png" alt="" /></p>

<p>With all the above in place, any push to the <code class="language-plaintext highlighter-rouge">build</code> branch of my source repository will trigger a job in Travis CI. The fancy live log and busy yellow icon show Travis hard at work. When the built site is pushed to my deployment repo, the job will turn a satisfying green.</p>

<p>With some experience, Travis CI is a joy to use. I can see how beyond our current context, Travis and can be used for automated testing and deployment in my future projects.</p>]]></content><author><name>Nuda &quot;Tony&quot; Zhang</name><email>nudzhang@umich.edu</email></author><category term="tutorial" /><category term="web" /><summary type="html"><![CDATA[A tutorial on automated build and deployment of Jekyll websites to GitHub Pages using Travis CI.]]></summary></entry><entry><title type="html">Consensus Protocol Using TLA+</title><link href="https://tonyzhangnd.github.io/2018/01/Consensus-TLA-Spec.html" rel="alternate" type="text/html" title="Consensus Protocol Using TLA+" /><published>2018-01-18T00:00:00-05:00</published><updated>2018-01-18T00:00:00-05:00</updated><id>https://tonyzhangnd.github.io/2018/01/Consensus%20TLA%20Spec</id><content type="html" xml:base="https://tonyzhangnd.github.io/2018/01/Consensus-TLA-Spec.html"><![CDATA[<aside class="sidebar__right">
<nav class="toc">
    <header><h4 class="nav__title"><i class="fas fa-file-alt"></i> Table of Contents</h4></header>
<ul class="toc__menu" id="markdown-toc">
  <li><a href="#consensus" id="markdown-toc-consensus">Consensus</a></li>
  <li><a href="#tla-model" id="markdown-toc-tla-model">TLA+ Model</a>    <ul>
      <li><a href="#state-machines-and-mathematical-functions" id="markdown-toc-state-machines-and-mathematical-functions">State Machines and Mathematical Functions</a></li>
      <li><a href="#init" id="markdown-toc-init">Init</a></li>
      <li><a href="#next" id="markdown-toc-next">Next</a></li>
    </ul>
  </li>
  <li><a href="#checking-for-correctness" id="markdown-toc-checking-for-correctness">Checking for Correctness</a></li>
  <li><a href="#concluding-remarks" id="markdown-toc-concluding-remarks">Concluding Remarks</a></li>
</ul>

  </nav>
</aside>

<p>Looking to dive into distributed systems research, I recently started learning how to write TLA+ specifications. <a href="https://lamport.azurewebsites.net/tla/tla.html">TLA+ is a specification language</a> used to mathematically describe an algorithm, and is adopted in both <a href="https://syslab.cs.washington.edu/papers/tapir-tr-v2.pdf">academia</a> and <a href="http://lamport.azurewebsites.net/tla/amazon.html">industry</a>. It provides functionalities to formally verify algorithm correctness. Precisely, it allows us to check if an algorithm satisfies the properties we want it to satisfy.</p>

<p>In this post I shall discuss a TLA+ specification of Consensus I wrote.   This specification describes the properties of Consensus at its highest level. That is, we are not concerned with <em>how</em> a specific protocol can achieve Consensus, but <em>what</em> properties should any solution to Consensus possess. It is thus useful for now to forget about mechanisms such as message-passing; a system that solves Consensus using extrasensory perception solves it equivalently as one using TCP.</p>

<h2 id="consensus">Consensus</h2>
<p>The Consensus problem is easy to state and understand. Yet it is the basic building-block of computer systems requiring coordination between agents.</p>

<p>Fundamentally, a protocol that solves Consensus in a synchronous system permitting crash failures must have the following properties.</p>

<ol>
  <li><strong>Validity:</strong> If all processes that propose a value propose \(v\), then all correct processes
eventually decide \(v\).</li>
  <li><strong>Agreement:</strong> If a correct process decides \(v\), then all correct processes eventually decide \(v\).</li>
  <li><strong>Integrity:</strong> If a correct process decides \(v\), then some process must have proposed \(v\).</li>
  <li><strong>Termination:</strong> Every correct process eventually decides some value.</li>
</ol>

<p>Agreement and Integrity are <strong>safety properties</strong>: they dictate that inconsistent decisions cannot occur. Validity and Termination are <strong>liveness properties</strong>: they prevent processes from trivially deciding, say, 0 in all cases, and from not halting.</p>

<p>For our present purpose let us consider, <a href="https://www.sciencedirect.com/science/article/pii/S0020019000000272">without loss of generality</a>, Binary Consensus, in which each participant proposes either 0 or 1.</p>

<h2 id="tla-model">TLA+ Model</h2>
<h3 id="state-machines-and-mathematical-functions">State Machines and Mathematical Functions</h3>
<p>To model Consensus mathematically as in TLA+, we adopt a state machine approach. Each participant in the protocol undergoes the following state transitions:</p>

<p><img src="/assets/images/consensus/consensusStateMachine.png" alt="" /></p>

<p>All processes begin in the working state. They then each propose a value, either 0 or 1, to the system. After which, all correct processes then deterministically decides on one of the proposed values (we do not yet care how).</p>

<p>To express these state transitions as math, we begin by defining some constants and variables. In TLA+, we write</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CONSTANTS PCS  \* The set of all processes

VARIABLES   states,     \* states of each process in PCS
            proposals,  \* proposals of each process in PCS
            pset,       \* set of all proposals 
            decisions   \* decision of each process in PCS
</code></pre></div></div>

<p>\(PCS\) and \(pset\) are mathematical sets. It may be intuitive at first to think of the variables \(states\), \(proposals\) and \(decisions\) as arrays in a programming language, mapping each process id to its respective state, proposal and decision. However, such intuition is not correct. TLA+ does not operate in the realm of memory addresses. The language of TLA+ is mathematics, and in math, arrays are functions with domain \(\mathbb{N}\) (the natural numbers).</p>

<p>But unlike arrays, TLA+ functions do not restrict us to any particular domain. Here, I shall define \(states\), \(proposals\) and \(decisions\) as functions mapping \(PCS\), the set of all processes, to their respective state, proposal and decision values.</p>

<h3 id="init">Init</h3>
<p>At the heart of all state machines, and indeed any TLA+ spec, are statements describing the initial state of the system, and how it transitions from one state to the next. In my model, while each process is a state machine, the entire system as a whole is itself a state machine, and it is this global state machine we describe in TLA+. Therefore, we can think of the behavior Consensus, and indeed any system, as a sequence of state transitions</p>

\[S_0 \rightarrow S_1 \rightarrow S_2 \rightarrow S_3 \rightarrow ...\]

<p>In TLA+, we define \(init\) as a boolean formula describing the properties of the initial state \(S_0\). I describe the initial state of the Consensus as so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>init == /\ states = [p \in PCS |-&gt; "working"]
        /\ proposals \in [PCS -&gt; {0, 1}]
        /\ pset = {}
        /\ decisions = [p \in PCS |-&gt; -1]
</code></pre></div></div>
<p>This is a logical conjunct of four statements</p>

<ol>
  <li>\(states\) is the function \(states : PCS \rightarrow \{``working", ``proposed", ``decided"\}\) such that \(\forall p \in PCS : states(p) \mapsto ``working"\).</li>
  <li>\(proposals\) is some function \(proposals : PCS \rightarrow \{0, 1\}\). TLA+ will then iterate through all such functions.</li>
  <li>\(pset\) is the empty set.</li>
  <li>\(decisions\) is the function \(decisions : PCS \rightarrow \{-1, 0, 1\}\) such that \(\forall p \in PCS : decisions(p) \mapsto -1\), with \(-1\) as the placeholder for not having yet decided.</li>
</ol>

<p>Note that in each statement, we are not performing variable assignments. Instead, statements 1 through 4 are boolean statements. For instance, statement 1 asserts that \(states\) is indeed the function described. And thus, the statement we call \(init\) is a boolean statement asserting the properties of the initial state of Consensus – any system at its initial state \(S_0\) satisfies the initial spec of Consensus if and only if \(init\) is true when applied to \(S_0\).</p>

<h3 id="next">Next</h3>
<p>While \(init\) asserts what must be true in \(S_0\), the \(next\) formula describes the state transition</p>

\[S_i \rightarrow S_{i+1}\]

<p>Thus intuitively, if \(init\) is the base case for an inductive proof, then \(next\) is the inductive step. If \(init\) is true on \(S_0\), and \(next\) is true on \(S_i \rightarrow S_{i+1}\) for all \(i = 0, 1, 2, 3...\), then our system behaves correctly as specified.</p>

<p>For my Consensus spec, I split \(next\) into two possible actions of the system –  any process can either choose to propose a value (if it has not yet done so), or decide a value (after all processes have proposed). I write \(propose\) as so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>propose(p) == /\ states[p] = "working"
              /\ states' = [states EXCEPT ![p] = "proposed"]
              /\ pset' = pset \cup {proposals[p]}
              /\ UNCHANGED &lt;&lt;proposals, decisions&gt;&gt;
</code></pre></div></div>

<p>Again, it is the logical conjunct of four statements that say that in a transition \(S_i \rightarrow S_{i+1}\) where process \(p\) proposes a value:</p>
<ol>
  <li>In \(S_i\), \(states(p) \mapsto ``working"\), i.e. \(p\) has not yet proposed.</li>
  <li>In \(S_{i+1}\), \(\forall q \ne p : states_{S_{i+1}}(q) \mapsto states_{S_i}(q)\) and \(states_{S_{i+1}}(p) \mapsto ``proposed"\), i.e. all states are unchanged except that of \(p\).</li>
  <li>In \(S_{i+1}\), \(pset\) now contains the value \(proposal(p)\).</li>
  <li>In \(S_{i+1}\), the functions \(proposals\) and \(decisions\) are exactly those in \(S_i\).</li>
</ol>

<p>Likewise, I express \(decide\) as:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>decide(p) == /\ ~ \E r \in PCS : states[r] = "working"
             /\ states[p] = "proposed"
             /\ states' = [states EXCEPT ![p] = "decided"]
             /\ decisions[p] = -1
             /\ decisions' = [decisions EXCEPT ![p] = CHOOSE x \in pset : TRUE]
             /\ UNCHANGED &lt;&lt;proposals, pset&gt;&gt;
</code></pre></div></div>
<p>It describes the transition where process \(p\) proposes a value, and is the logical conjunct of:</p>
<ol>
  <li>In \(S_i\), there does not exist any process \(q\) such that \(states(q) \mapsto ``working"\), i.e. every process has proposed.</li>
  <li>In \(S_{i+1}\), \(\forall q \ne p : states_{S_{i+1}}(q) \mapsto states_{S_i}(q)\) and \(states_{S_{i+1}}(p) \mapsto ``decided"\), i.e. all states are unchanged except that of \(p\).</li>
  <li>
    <ol>
      <li>In \(S_i\), \(decisions(p) \mapsto -1\), i.e. \(p\) has not yet decided.</li>
    </ol>
  </li>
  <li>In \(S_{i+1}\), \(\forall q \ne p : decisions_{S_{i+1}}(q) \mapsto decisions_{S_i}(q)\) and \(decisions_{S_{i+1}}(p)\) maps to some deterministically chosen value from \(pset\). In the semantics of TLA+, this value will be the same for all processes.</li>
  <li>In \(S_{i+1}\), the functions \(proposals\) and \(decisions\) are exactly those in  \(S_i\).</li>
</ol>

<p>Finally, we can express \(next\) as simply</p>

\[next \equiv \exists p \in PCS : propose(p) \lor decide(p)\]

<p>which means that in any step \(S_i \rightarrow S_{i+1}\) there exists a process \(p\) which either proposes or decides a value. When such a process does not exist, then the protocol halts. In TLA+ syntax, that’s</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>next == \E p \in PCS : propose(p) \/ decide(p)
</code></pre></div></div>

<h2 id="checking-for-correctness">Checking for Correctness</h2>
<p>The protocol is complete. Now we want to make sure that if \(init\) and \(next\) are true on</p>

\[S_0 \rightarrow S_1 \rightarrow S_2 \rightarrow S_3 \rightarrow ...\]

<p>, then we satisfy the spec of Consensus that is <strong>validity</strong>, <strong>agreement</strong>, <strong>integrity</strong> and <strong>termination</strong>. TLA+ allows us to do exactly that by expressing these as invariants.</p>

<p>But first, we also want to make sure we did not break any type requirements by specifying the invariant \(typeOK\). I shall omit detailed descriptions as the syntax is similar to what I have described above.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>typeOK == /\ states \in [PCS -&gt; {"working", "proposed", "decided"}]
          /\ proposals \in [PCS -&gt; {0, 1}]
          /\ pset \subseteq {0, 1}
          /\ decisions \in [PCS -&gt; {-1, 0, 1}]
</code></pre></div></div>

<p>Finally, we have the invariants</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>validity == \E v \in {0, 1} : (\A p \in PCS : proposals[p] = v) 
                =&gt; \A q \in PCS : (states[q] = "decided" 
                    =&gt; decisions[q] = v)

agreement == \A p1, p2 \in PCS : ~ /\ decisions[p1] = 0
                                   /\ decisions[p2] = 1
                                  
integrity == \A p \in PCS : 
                (states[p] = "decided" 
                =&gt; \E r \in PCS : proposals[r] = decisions[p])

specOK == /\ validity
          /\ agreement
          /\ integrity
</code></pre></div></div>
<p>Here, the only syntax we have yet seen is <code class="language-plaintext highlighter-rouge">=&gt;</code>, which represents logical implication. Therefore, the menacing description for \(validity\) means, quite simply, that, if there exists a value \(v \in \{0, 1\}\) such that everyone proposed \(v\), then at any time for all processes \(q\), if \(q\) has decided, then \(q\) must have decided \(v\).</p>

<p>But what about <strong>termination</strong>? Well, termination means that the protocol halts. In TLA+, that is characterized as a form of deadlock, and TLA+ has built-in detection for that.</p>

<p>We then set up a TLA+ model as so, telling it to check the behavior described by \(init\) and \(next\) against the invariants, and for deadlock.
<img src="/assets/images/consensus/model.png" alt="" /></p>

<p>Running the model tells us what we have is correct.</p>

<h2 id="concluding-remarks">Concluding Remarks</h2>
<p>It does seem that the Consensus protocol I have described works like magic. There is no message passing, and processes spontaneously decide on a value from a global set. Yet this is the goal. As emphasized above, this is a high-level description of what Consensus <em>should</em> do, and not how it achieves it.</p>

<p>Of course, TLA+ also allows us to specify a particular implementation of Consensus, complete with message passing and the like. But the point of having done as we did here is that using TLA+, we can later check any specific implementation against this high-level specification we have written. In other words, a specific instance of Consensus is correct if it implies that the general spec is satisfied. I will explore doing that in later post.</p>

<p>Lastly, TLA+ lets us pretty-print our spec, so it looks nicely formatted in latex-style math. You can check out the pretty-printed version of this spec, and the code itself, on <a href="https://github.com/TonyZhangND/TLAplus/tree/master/Consensus">my GitHub page</a>.</p>]]></content><author><name>Nuda &quot;Tony&quot; Zhang</name><email>nudzhang@umich.edu</email></author><summary type="html"><![CDATA[Looking to dive into distributed systems research, I recently started learning how to write TLA+ specifications. TLA+ is a specification language used to mathematically describe an algorithm, and is adopted in both academia and industry. It provides functionalities to formally verify algorithm correctness. Precisely, it allows us to check if an algorithm satisfies the properties we want it to satisfy.]]></summary></entry><entry><title type="html">Website Blocker Script - The End of Procrastination</title><link href="https://tonyzhangnd.github.io/2017/12/Website-Blocker.html" rel="alternate" type="text/html" title="Website Blocker Script - The End of Procrastination" /><published>2017-12-25T00:00:00-05:00</published><updated>2017-12-25T00:00:00-05:00</updated><id>https://tonyzhangnd.github.io/2017/12/Website%20Blocker</id><content type="html" xml:base="https://tonyzhangnd.github.io/2017/12/Website-Blocker.html"><![CDATA[<p>Like most people, I too am guilty of opening my browser to look up some work related thing on the internet, but somehow find myself half an hour later watching cat videos on YouTube, not remembering what I wanted to do in the first place.</p>

<p>Well, such times will be vanquished. This Christmas, I present to all, the product of my crusade against unproductivity, my final procrastination activity to end all procrastination –</p>

<p><em>A Python script that blocks websites</em> : <a href="https://github.com/TonyZhangND/website-blocker">https://github.com/TonyZhangND/website-blocker</a></p>

<p>It blocks any website you tell it to, eliminating time-wasting targets such as Facebook, YouTube, Reddit, etc while you are working. You could also turn it off when you are ready to waste your time again.</p>

<p>The script works by modifying the hosts file in OSX. Understandably, one could achieve the same effect manually with one’s favorite text editor. But hey, I get to procrastinate on studying for the GRE by writing a nifty Python script!</p>

<p>Merry Christmas ~</p>]]></content><author><name>Nuda &quot;Tony&quot; Zhang</name><email>nudzhang@umich.edu</email></author><summary type="html"><![CDATA[Like most people, I too am guilty of opening my browser to look up some work related thing on the internet, but somehow find myself half an hour later watching cat videos on YouTube, not remembering what I wanted to do in the first place.]]></summary></entry><entry><title type="html">Mitosis Image Processing Part 2 - Locating Final Points of Interest</title><link href="https://tonyzhangnd.github.io/2017/07/Mitosis-Image-Processing-2.html" rel="alternate" type="text/html" title="Mitosis Image Processing Part 2 - Locating Final Points of Interest" /><published>2017-07-28T00:00:00-04:00</published><updated>2017-07-28T00:00:00-04:00</updated><id>https://tonyzhangnd.github.io/2017/07/Mitosis%20Image%20Processing%202</id><content type="html" xml:base="https://tonyzhangnd.github.io/2017/07/Mitosis-Image-Processing-2.html"><![CDATA[<p><img src="/assets/images/template-matching/header-short.png" alt="Before-after image" /></p>
<aside class="sidebar__right">
<nav class="toc">
    <header><h4 class="nav__title"><i class="fas fa-file-alt"></i> Table of Contents</h4></header>
<ul class="toc__menu" id="markdown-toc">
  <li><a href="#the-input-data" id="markdown-toc-the-input-data">The Input Data</a></li>
  <li><a href="#geometric-transformation-and-coalescing-algorithm" id="markdown-toc-geometric-transformation-and-coalescing-algorithm">Geometric Transformation and Coalescing Algorithm</a>    <ul>
      <li><a href="#transform" id="markdown-toc-transform">Transform</a></li>
      <li><a href="#coalesce" id="markdown-toc-coalesce">Coalesce</a></li>
    </ul>
  </li>
  <li><a href="#putting-it-all-together" id="markdown-toc-putting-it-all-together">Putting It All Together</a></li>
  <li><a href="#conclusion-and-takeaway" id="markdown-toc-conclusion-and-takeaway">Conclusion and Takeaway</a>    <ul>
      <li><a href="#my-takeaway" id="markdown-toc-my-takeaway">My Takeaway</a></li>
    </ul>
  </li>
  <li><a href="#complete-code" id="markdown-toc-complete-code">Complete Code</a></li>
</ul>

  </nav>
</aside>
<p>The problem we are trying to solve is find the exact locations of cells undergoing mitosis in histology images. These are the cells that are annotated with green arrows. In other words, given the <strong>Before</strong> image above, we want to extract data shown in <strong>After</strong>.</p>

<p>In <a href="https://tonyzhangnd.github.io/2017/07/Mitosis-Image-Processing-1.html">Part 1</a>, I have detailed how I used template matching in openCV to obtain bounding boxes on the arrows with 100% accuracy. In this post, I will describe my algorithm used to transform the bounding box information into the coordinates of the arrowheads.</p>

<h2 id="the-input-data">The Input Data</h2>
<p>We use the code in Part 1, but with one important change:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">cv2</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">scipy</span> <span class="kn">import</span> <span class="n">misc</span><span class="p">,</span> <span class="n">ndimage</span>
<span class="kn">from</span> <span class="n">multiprocessing</span> <span class="kn">import</span> <span class="n">Pool</span>
<span class="kn">import</span> <span class="n">pickle</span>
<span class="kn">import</span> <span class="n">math</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">csv</span>

<span class="n">PKL_DIR</span> <span class="o">=</span> <span class="p">{</span><span class="n">path</span> <span class="n">to</span> <span class="n">pickle</span> <span class="n">files</span><span class="p">}</span>
<span class="n">LOC_DIR</span> <span class="o">=</span> <span class="p">{</span><span class="n">path</span> <span class="n">to</span> <span class="n">final</span> <span class="n">csv</span> <span class="n">files</span><span class="p">}</span>

<span class="p">{</span><span class="kn">import</span> <span class="n">functions</span> <span class="k">from</span> <span class="n">Part</span> <span class="mi">1</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">match_and_pickle</span><span class="p">(</span><span class="n">img_name</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Apply template matching to img_name in IMG_DIR, using
    tmpl{0...359}.png and mask{0...359}.png.
    
    Output: Coordinates of the top left corner of matching templates, 
    in the format [(deg, [points])], saved in img_name.pkl.
    </span><span class="sh">"""</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Matching img %s</span><span class="sh">'</span> <span class="o">%</span><span class="n">img_name</span><span class="p">)</span>
    <span class="n">img_rgb</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">STRIPPED_DIR</span><span class="p">,</span> <span class="n">img_name</span><span class="p">))</span>
    <span class="n">img_gray</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">img_rgb</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>
    <span class="n">matches</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">deg</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">360</span><span class="p">,</span> <span class="n">MATCH_RES</span><span class="p">):</span>
        <span class="n">tmpl</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">TMPL_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">tmpl%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> 
            <span class="n">cv2</span><span class="p">.</span><span class="n">IMREAD_GRAYSCALE</span><span class="p">)</span>
        <span class="n">mask</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">MASK_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">mask%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> 
            <span class="n">cv2</span><span class="p">.</span><span class="n">IMREAD_GRAYSCALE</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">tmpl</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">mask</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Failed to match for tmpl %d.</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">tmpl</span><span class="p">.</span><span class="n">shape</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">res</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">matchTemplate</span><span class="p">(</span><span class="n">img_gray</span><span class="p">,</span> <span class="n">tmpl</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">TM_SQDIFF</span><span class="p">,</span> <span class="n">mask</span><span class="o">=</span><span class="n">mask</span><span class="p">)</span>
            <span class="n">loc</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">res</span> <span class="o">&lt;</span> <span class="n">MATCH_THRESH</span><span class="p">)</span>
            <span class="n">pts</span> <span class="o">=</span> <span class="nf">zip</span><span class="p">(</span><span class="o">*</span><span class="n">loc</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>   <span class="c1">#top left corners of arrow bounding box
</span>            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">pts</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span>
                <span class="n">matches</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">deg</span><span class="p">,</span> <span class="n">pts</span><span class="p">))</span>
    <span class="n">file_name</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">PKL_DIR</span><span class="p">,</span>
        <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="sh">'</span><span class="s">.pkl</span><span class="sh">'</span><span class="p">)</span>  <span class="c1">#eg M21.pkl
</span>    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span><span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">matches</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
    <span class="k">return</span>
</code></pre></div></div>
<p>Here, I replaced the function <code class="language-plaintext highlighter-rouge">match_and_draw()</code> from Part 1 with <code class="language-plaintext highlighter-rouge">match_and_pickle()</code>. The difference is that instead of drawing the bounding boxes the images, we save the location the arrows and their orientations as pickled data.</p>

<p>Recall that we have 360 arrow templates, one for each degree of orientation, with which we perform template matching. For each image, we save the data in the following Python tuple list format: <br />
<code class="language-plaintext highlighter-rouge">[(deg, [(x, y), ...]), ...]</code>,
where <code class="language-plaintext highlighter-rouge">deg</code> is the orientation of the template that matched, and <code class="language-plaintext highlighter-rouge">(x, y)</code> are the coordinates of the matching bounding box. Note that these are the positions of the top left corners of the bounding boxes.</p>

<p>I can visualize then the bounding boxes with the following code, which loads the pickle data generated by <code class="language-plaintext highlighter-rouge">match_and_pickle()</code> and draws the bounding boxes on a given image.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Color_Iterator</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="n">colors</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">),</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">204</span><span class="p">,</span><span class="mi">204</span><span class="p">,</span><span class="mi">0</span><span class="p">)]</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">colors</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">i</span> <span class="o">%</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">colors</span><span class="p">)]</span>


<span class="n">CI</span> <span class="o">=</span> <span class="nc">Color_Iterator</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">draw_from_pkl</span><span class="p">(</span><span class="n">img_name</span><span class="p">,</span> <span class="n">output_path</span><span class="o">=</span><span class="sh">'</span><span class="s">./</span><span class="sh">'</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Draws bounding boxes on stripped ver of img_name with matches from
    img_name.pkl. 
    Saves output image in output_path.

    Example: draw_from_pkl(M21.jpg, </span><span class="sh">'</span><span class="s">./</span><span class="sh">'</span><span class="s">) draws boxes on M21_s.jpg, and 
    saves output as M21_r.jpg in the current directory.
    </span><span class="sh">"""</span>
    <span class="n">img_name</span> <span class="o">=</span> <span class="sh">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="sh">'</span><span class="s">_s.jpg</span><span class="sh">'</span>
    <span class="n">img_rgb</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">STRIPPED_DIR</span><span class="p">,</span> <span class="n">img_name</span><span class="p">))</span>
    <span class="n">pkl_name</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">PKL_DIR</span><span class="p">,</span>
        <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="sh">'</span><span class="s">.pkl</span><span class="sh">'</span><span class="p">)</span>  <span class="c1">#eg M21.pkl
</span>    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">pkl_name</span><span class="p">,</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">matches</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="nf">for </span><span class="p">(</span><span class="n">deg</span><span class="p">,</span> <span class="n">pts</span><span class="p">)</span> <span class="ow">in</span> <span class="n">matches</span><span class="p">:</span>
        <span class="n">tmpl</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">TMPL_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">tmpl%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> 
            <span class="n">cv2</span><span class="p">.</span><span class="n">IMREAD_GRAYSCALE</span><span class="p">)</span>
        <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">tmpl</span><span class="p">.</span><span class="n">shape</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">pt</span> <span class="ow">in</span> <span class="n">pts</span><span class="p">:</span>
            <span class="n">cv2</span><span class="p">.</span><span class="nf">rectangle</span><span class="p">(</span><span class="n">img_rgb</span><span class="p">,</span> <span class="n">pt</span><span class="p">,</span> <span class="p">(</span><span class="n">pt</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">w</span><span class="p">,</span> <span class="n">pt</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">h</span><span class="p">),</span> <span class="n">CI</span><span class="p">.</span><span class="nf">next</span><span class="p">(),</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">img_name</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">cv2</span><span class="p">.</span><span class="nf">imwrite</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">output_path</span><span class="p">,</span> <span class="n">img_name</span><span class="o">+</span><span class="sh">'</span><span class="s">_r.jpg</span><span class="sh">'</span><span class="p">),</span> <span class="n">img_rgb</span><span class="p">)</span>  <span class="c1">#eg M21_r.jpg
</span></code></pre></div></div>

<p>The above code produces images that appear like so:</p>

<p><img src="/assets/images/template-matching/res_color box.jpg" alt="Bounding boxes with color" /></p>

<p>Here, I used <code class="language-plaintext highlighter-rouge">Color_Iterator</code> to iterate the color of the boxes drawn. This is to highlight an important feature: <em>There are multiple matches for each arrow</em>. This is because two templates a degree apart may both match on the same arrow; or one template could match many times on the same arrow, each a few pixels apart.</p>

<p>This fact is important later on because it means that there is a many-to-one mapping from matches to arrows. Since we only want one point per arrow in our final output, we need to coalesce a bunch of matches per arrow into one single point.</p>

<h2 id="geometric-transformation-and-coalescing-algorithm">Geometric Transformation and Coalescing Algorithm</h2>

<h3 id="transform">Transform</h3>
<p>One important question is still unanswered. Currently, we only have information regarding the location of the top left corner of the bounding boxes. <strong>As such, how do we transform these points into the position of the arrowheads?</strong> With the orientation of the arrows retrieved from our matching algorithm, this can be done with simple trigonometry!</p>

<p><img src="/assets/images/template-matching/geometry.png" alt="Geometry" /></p>

<p>Consider the above schematic. The dashed box represents the bounding box on the arrow. \(\alpha\), \((x, y)\), \(width\) and \(height\) are known quantities, where \(\alpha\) is the rotation of the matching template, and \(width\), \(height\) are the dimensions of the bounding box.</p>

<p>The center of the bounding box \((cx, cy)\), which is also the center of the arrow, is:</p>

\[(cx, cy) = (x+\frac{width}{2}, y+\frac{height}{2})\]

<p>Then, the quantities we are after, \((px, py)\), are:</p>

\[px = cx - l \cos(\alpha)\]

\[py = cy + l \sin(\alpha)\]

<p>where \(l\) is the practical pixel radius of the arrow. It is longer than the actual half-length of the arrows because we want \((px, py)\) to be slightly ahead of the arrow tip.</p>

<p>Note that in this case, I have defined the negative x-axis to be zero degrees, and the angle increases anti-clockwise.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">RADIUS</span> <span class="o">=</span> <span class="mi">42</span>

<span class="k">def</span> <span class="nf">transform</span><span class="p">(</span><span class="n">matches</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Transforms a list of (deg * coordinate list), where the coordinates
    are of the top-left corner of the tmpl bounding boxes, to a list containting
    the coordinates of the tips of the arrows.
    Returns the list of transformed coordinates.
    </span><span class="sh">"""</span>
    <span class="n">tips</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="nf">for </span><span class="p">(</span><span class="n">deg</span><span class="p">,</span> <span class="n">pts</span><span class="p">)</span> <span class="ow">in</span> <span class="n">matches</span><span class="p">:</span>
        <span class="n">tmpl</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">TMPL_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">tmpl%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">tmpl</span><span class="p">.</span><span class="n">shape</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">rad</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="nf">radians</span><span class="p">(</span><span class="n">deg</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">pt</span> <span class="ow">in</span> <span class="n">pts</span><span class="p">:</span>   <span class="c1">#top left corner of arrow bounding box
</span>            <span class="p">(</span><span class="n">cx</span><span class="p">,</span> <span class="n">cy</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">pt</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">w</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">pt</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">h</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>  <span class="c1">#center of the arrow
</span>            <span class="n">tips</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="nf">int</span><span class="p">(</span><span class="n">cx</span> <span class="o">-</span> <span class="n">RADIUS</span><span class="o">*</span><span class="n">math</span><span class="p">.</span><span class="nf">cos</span><span class="p">(</span><span class="n">rad</span><span class="p">)),</span> <span class="nf">int</span><span class="p">(</span><span class="n">cy</span> <span class="o">+</span> <span class="n">RADIUS</span><span class="o">*</span><span class="n">math</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">rad</span><span class="p">))))</span>
    <span class="k">return</span> <span class="n">tips</span>
</code></pre></div></div>
<p>In the above code,</p>

<ul>
  <li>The parameter <code class="language-plaintext highlighter-rouge">matches</code> is the list generated by <code class="language-plaintext highlighter-rouge">match_and_picke()</code></li>
  <li>\(\alpha=\) <code class="language-plaintext highlighter-rouge">deg</code></li>
  <li>\((x, y)=\) <code class="language-plaintext highlighter-rouge">pt</code></li>
  <li>\(width=\) <code class="language-plaintext highlighter-rouge">w</code></li>
  <li>\(height=\) <code class="language-plaintext highlighter-rouge">h</code></li>
  <li>\(l=\) <code class="language-plaintext highlighter-rouge">RADIUS</code></li>
  <li>\([(px, py), ...]=\) <code class="language-plaintext highlighter-rouge">tips</code></li>
</ul>

<p>Plotting the list of \((px, py)\) on the original image will give us something like this:</p>

<p><img src="/assets/images/template-matching/res_dup arrows.jpg" alt="After transformation" /></p>

<p>Again, if you observe closely, there are multiple points per arrow.</p>

<h3 id="coalesce">Coalesce</h3>
<p>To produce our final output, coalescing multiple points into one final point is straightforward: if two points \(a\) and \(b\) are within a certain distance, then \(b\) is a duplicate.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">coalesce</span><span class="p">(</span><span class="n">tips</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Reduces points close to together in tips into one point.
    Returns the list of reduced points.
    </span><span class="sh">"""</span>
    <span class="n">thresh</span> <span class="o">=</span> <span class="mi">7</span>
    
    <span class="k">def</span> <span class="nf">not_distinct</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">):</span>
        <span class="p">(</span><span class="n">p1x</span><span class="p">,</span> <span class="n">p1y</span><span class="p">)</span> <span class="o">=</span> <span class="n">p1</span>
        <span class="p">(</span><span class="n">p2x</span><span class="p">,</span> <span class="n">p2y</span><span class="p">)</span> <span class="o">=</span> <span class="n">p2</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">p1x</span><span class="o">-</span><span class="n">p2x</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="n">p1y</span><span class="o">-</span><span class="n">p2y</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">&lt;=</span> <span class="n">thresh</span><span class="o">**</span><span class="mi">2</span> 

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">pt</span><span class="p">,</span> <span class="n">distinct_pts</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">dpt</span> <span class="ow">in</span> <span class="n">distinct_pts</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">not_distinct</span><span class="p">(</span><span class="n">pt</span><span class="p">,</span> <span class="n">dpt</span><span class="p">):</span>
                <span class="k">return</span>
        <span class="n">distinct_pts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">pt</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">tips</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">tips</span>
    <span class="n">distinct_pts</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">pt</span> <span class="ow">in</span> <span class="n">tips</span><span class="p">:</span>
        <span class="nf">update</span><span class="p">(</span><span class="n">pt</span><span class="p">,</span> <span class="n">distinct_pts</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">distinct_pts</span>
</code></pre></div></div>

<p>Here, the input <code class="language-plaintext highlighter-rouge">tips</code> is the list of \((px, py)\) for all the arrows in an image. <code class="language-plaintext highlighter-rouge">thresh</code> is the pixel distance between two points for them to be considered duplicates. The return value <code class="language-plaintext highlighter-rouge">distinct_points</code> is then the final set of points in an image, with one point per arrow. This algorithm runs in \(O(n^2)\).</p>

<p>One may imagine that coalescing can be improved to \(O(n)\) if we first sort the input list and use the ‘runner technique’. Then we would only need a ‘fast’ pointer to look ahead and find the next distinct point, then add the ‘slow’ pointer to our output and jump the ‘slow’ pointer to the ‘fast’ pointer. But this requires the precondition that no pair of arrows point to <em>similar</em> \(x\) <em>or</em> \(y\) coordinates, which is something we <em>cannot</em> guarantee.</p>

<h2 id="putting-it-all-together">Putting It All Together</h2>

<p>The following function <code class="language-plaintext highlighter-rouge">transform_and_coalesce()</code> is a wrapper that performs <code class="language-plaintext highlighter-rouge">transform()</code> and <code class="language-plaintext highlighter-rouge">coalesce()</code> on data loaded from a pickle file and then writes the final output into a csv file. The first line is the number of points in the image, followed by one point per line.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">transform_and_coalesce</span><span class="p">(</span><span class="n">img_name</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Applies transform() and coalesce() on data from the pickle file
    of img_name. E.g. M21.pkl from PKL_DIR
    Saves output as a csv file. E.g. M21.csv
    </span><span class="sh">"""</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Transforming for image %s</span><span class="sh">'</span> <span class="o">%</span><span class="n">img_name</span><span class="p">)</span>
    <span class="n">pkl_name</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="sh">'</span><span class="s">.pkl</span><span class="sh">'</span>  <span class="c1">#eg M21.pkl
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">PKL_DIR</span><span class="p">,</span> <span class="n">pkl_name</span><span class="p">),</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">matches</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">IOError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Failed to transform img %s. pkl file not found.</span><span class="sh">'</span> <span class="o">%</span><span class="n">img_name</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="n">tips</span> <span class="o">=</span> <span class="nf">coalesce</span><span class="p">(</span><span class="nf">transform</span><span class="p">(</span><span class="n">matches</span><span class="p">))</span>
    <span class="c1">#Write into csv
</span>    <span class="n">csv_name</span> <span class="o">=</span> <span class="sh">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="sh">'</span><span class="s">.csv</span><span class="sh">'</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">LOC_DIR</span><span class="p">,</span> <span class="n">csv_name</span><span class="p">),</span><span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">wr</span> <span class="o">=</span> <span class="n">csv</span><span class="p">.</span><span class="nf">writer</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
        <span class="n">wr</span><span class="p">.</span><span class="nf">writerow</span><span class="p">([</span><span class="nf">len</span><span class="p">(</span><span class="n">tips</span><span class="p">)])</span>  <span class="c1">#1st line is number of arrows
</span>        <span class="k">for</span> <span class="n">pt</span> <span class="ow">in</span> <span class="n">tips</span><span class="p">:</span>
            <span class="n">wr</span><span class="p">.</span><span class="nf">writerow</span><span class="p">(</span><span class="n">pt</span><span class="p">)</span>
    <span class="k">return</span>
</code></pre></div></div>

<p>To make sure we get the correct result <code class="language-plaintext highlighter-rouge">plot()</code> draws the points on the image by loading the points from the csv file we created.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot</span><span class="p">(</span><span class="n">img_name</span><span class="p">,</span> <span class="n">output_path</span><span class="o">=</span><span class="sh">'</span><span class="s">plots</span><span class="sh">'</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Plotting image %s</span><span class="sh">'</span> <span class="o">%</span><span class="n">img_name</span><span class="p">)</span>
    <span class="n">img_rgb</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">IMG_DIR</span><span class="p">,</span> <span class="n">img_name</span><span class="p">))</span>
    <span class="n">csv_name</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="sh">'</span><span class="s">.csv</span><span class="sh">'</span>  <span class="c1">#eg M21.pkl
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">LOC_DIR</span><span class="p">,</span> <span class="n">csv_name</span><span class="p">),</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">rd</span> <span class="o">=</span> <span class="n">csv</span><span class="p">.</span><span class="nf">reader</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
            <span class="n">num</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">rd</span><span class="p">.</span><span class="nf">next</span><span class="p">()[</span><span class="mi">0</span><span class="p">])</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
                <span class="n">pt_str</span> <span class="o">=</span> <span class="n">rd</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span>
                <span class="n">pt</span> <span class="o">=</span> <span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">pt_str</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nf">int</span><span class="p">(</span><span class="n">pt_str</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
                <span class="n">cv2</span><span class="p">.</span><span class="nf">drawMarker</span><span class="p">(</span><span class="n">img_rgb</span><span class="p">,</span> <span class="n">pt</span><span class="p">,</span> <span class="n">CI</span><span class="p">.</span><span class="nf">next</span><span class="p">(),</span> <span class="n">cv2</span><span class="p">.</span><span class="n">MARKER_CROSS</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
            <span class="n">cv2</span><span class="p">.</span><span class="nf">putText</span><span class="p">(</span><span class="n">img_rgb</span><span class="p">,</span> <span class="nf">str</span><span class="p">(</span><span class="n">num</span><span class="p">),</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">800</span><span class="p">),</span> <span class="n">cv2</span><span class="p">.</span><span class="n">FONT_HERSHEY_SIMPLEX</span><span class="p">,</span> <span class="mi">2</span><span class="p">,(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">),</span><span class="mi">2</span><span class="p">,</span><span class="n">cv2</span><span class="p">.</span><span class="n">LINE_AA</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">IOError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Failed to plot img %s. pkl file not found.</span><span class="sh">'</span> <span class="o">%</span><span class="n">img_name</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="n">out_name</span> <span class="o">=</span> <span class="sh">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="sh">'</span><span class="s">_p.jpg</span><span class="sh">'</span>
    <span class="n">out</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">output_path</span><span class="p">,</span> <span class="n">out_name</span><span class="p">)</span>
    <span class="n">cv2</span><span class="p">.</span><span class="nf">imwrite</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">img_rgb</span><span class="p">)</span>  <span class="c1">#eg M21_p.jpg
</span></code></pre></div></div>

<p>Here is an example of the final result:
<img src="/assets/images/template-matching/res_final.jpg" alt="Final plot" /></p>

<p>We can see that we now only have one point for each arrow, and we are done!</p>

<p>The full code complete with some additional functions for bulk processing are at the end of this page.</p>

<h2 id="conclusion-and-takeaway">Conclusion and Takeaway</h2>
<p>There are some design choices in my program that I would like to address.</p>

<p>First, it is possible, and indeed more efficient, to do away with the pickling and directly pass the output of <code class="language-plaintext highlighter-rouge">match()</code> into <code class="language-plaintext highlighter-rouge">transform_and_coalesce()</code>. However, I chose to have an intermediate pickling stage for the sake of easier debugging. It allows me to draw plots from the pickled data to make sure <code class="language-plaintext highlighter-rouge">match()</code> works as it should. It also allows me to test <code class="language-plaintext highlighter-rouge">transform_and_coalesce()</code> without needing to run <code class="language-plaintext highlighter-rouge">match()</code> over and over again.</p>

<p>Second, my supervisor asked me why I have individual final csv files for each image, instead of saving the data for all my images in one big csv. The answer is that I need the data for machine learning applications later on, but I will probably only need data for a few images at any given time. So separating the csv’s mean less slicing and dicing later on.</p>

<h3 id="my-takeaway">My Takeaway</h3>
<p>Working on this image processing project was something I was really excited about. Through this process, I came to realize what motivates me. I am excited by stuff that I don’t know how to do, stuff that I feel completely clueless about. At times, work goes like this:</p>

<ol>
  <li>Supervisor: Here’s a problem, do you know how to solve it?</li>
  <li>Me: I have absolutely no clue, but that means I will get it done.</li>
  <li>Me a few days later: It is done!</li>
</ol>

<p>On the other hand, I’m less excited about problems where I know there are standard tools and a standard solutions, because then it is grunt work, and there is less to learn from it.</p>

<p>The more clueless I am, the more I want to get my hands on the problem. It is beyond the excitement of learning a new technology or skill. It is the passion of doing something where there is no known recipe, and trying to find out if it can even be done!</p>

<h2 id="complete-code">Complete Code</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">cv2</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">scipy</span> <span class="kn">import</span> <span class="n">misc</span><span class="p">,</span> <span class="n">ndimage</span>
<span class="kn">from</span> <span class="n">multiprocessing</span> <span class="kn">import</span> <span class="n">Pool</span>
<span class="kn">import</span> <span class="n">pickle</span>
<span class="kn">import</span> <span class="n">math</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">csv</span>

<span class="n">IMG_DIR</span> <span class="o">=</span> <span class="p">{</span><span class="n">path</span> <span class="n">to</span> <span class="n">original</span> <span class="n">images</span><span class="p">}</span>
<span class="n">STRIPPED_DIR</span> <span class="o">=</span> <span class="p">{</span><span class="n">path</span> <span class="n">to</span> <span class="n">save</span> <span class="n">stripped</span> <span class="n">images</span><span class="p">}</span>
<span class="n">TMPL_DIR</span> <span class="o">=</span> <span class="p">{</span><span class="n">path</span> <span class="n">to</span> <span class="n">templates</span><span class="p">}</span>
<span class="n">MASK_DIR</span> <span class="o">=</span> <span class="p">{</span><span class="n">path</span> <span class="n">to</span> <span class="n">masks</span><span class="p">}</span>
<span class="n">PKL_DIR</span> <span class="o">=</span> <span class="p">{</span><span class="n">path</span> <span class="n">to</span> <span class="n">pickle</span> <span class="n">files</span><span class="p">}</span>
<span class="n">LOC_DIR</span> <span class="o">=</span> <span class="p">{</span><span class="n">path</span> <span class="n">to</span> <span class="n">final</span> <span class="n">csv</span> <span class="n">files</span><span class="p">}</span>

<span class="n">GREEN</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">89</span><span class="p">,</span> <span class="mi">248</span><span class="p">,</span> <span class="mi">89</span><span class="p">])</span>
<span class="n">MATCH_THRESH</span> <span class="o">=</span> <span class="mi">11</span>
<span class="n">MATCH_RES</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1">#specifies degree-interval at which to match
#Match thresholds and resolution were empirically tuned
</span><span class="n">RADIUS</span> <span class="o">=</span> <span class="mi">42</span>  <span class="c1">#Half the length of the arrow in pixels
</span>

<span class="k">class</span> <span class="nc">Color_Iterator</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="n">colors</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">),</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">204</span><span class="p">,</span><span class="mi">204</span><span class="p">,</span><span class="mi">0</span><span class="p">)]</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">colors</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">i</span> <span class="o">%</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">colors</span><span class="p">)]</span>


<span class="n">CI</span> <span class="o">=</span> <span class="nc">Color_Iterator</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">strip</span><span class="p">(</span><span class="n">img_name</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Removes background from img_name in IMG_DIR, leaving only green arrows.
    Saves stripped image in STRIPPED_DIR, as img_name</span><span class="sh">'</span><span class="s">s</span><span class="sh">'</span><span class="s">.jpg 
    </span><span class="sh">"""</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Stripping img %s</span><span class="sh">'</span> <span class="o">%</span><span class="n">img_name</span><span class="p">)</span>
    <span class="n">arr</span> <span class="o">=</span> <span class="n">misc</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">IMG_DIR</span><span class="p">,</span> <span class="n">img_name</span><span class="p">))</span>
    <span class="p">(</span><span class="n">x_size</span><span class="p">,</span> <span class="n">y_size</span><span class="p">,</span> <span class="n">z_size</span><span class="p">)</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">shape</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">x_size</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">y_size</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">np</span><span class="p">.</span><span class="nf">array_equal</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">],</span> <span class="n">GREEN</span><span class="p">):</span>
                <span class="n">arr</span><span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
    <span class="n">img_name</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">misc</span><span class="p">.</span><span class="nf">imsave</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">STRIPPED_DIR</span><span class="p">,</span> <span class="n">img_name</span><span class="o">+</span><span class="sh">'</span><span class="s">_s.jpg</span><span class="sh">'</span><span class="p">),</span> <span class="n">arr</span><span class="p">)</span>  <span class="c1">#eg M21_s.jpg
</span>    <span class="k">return</span>


<span class="k">def</span> <span class="nf">strip_all</span><span class="p">(</span><span class="n">num_processes</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Applies strip() to images of name M{start..start+num_images-1}.jpg.

    This method uses multiprocessing:
    num_processes -- the number of parallel processes to spawn for this task.
    (default 2)
    </span><span class="sh">"""</span>
    <span class="n">imgs</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">IMG_DIR</span><span class="p">)</span> <span class="k">if</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">M[0-9]*.jpg</span><span class="sh">'</span><span class="p">,</span> <span class="n">i</span><span class="p">)]</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Stripping background from %d images</span><span class="sh">'</span> <span class="o">%</span><span class="nf">len</span><span class="p">(</span><span class="n">imgs</span><span class="p">))</span>
    <span class="n">pool</span> <span class="o">=</span> <span class="nc">Pool</span><span class="p">(</span><span class="n">num_processes</span><span class="p">)</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="n">strip</span><span class="p">,</span> <span class="n">imgs</span><span class="p">)</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Done</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">return</span>


<span class="k">def</span> <span class="nf">make_templates</span><span class="p">(</span><span class="n">base</span><span class="o">=</span><span class="sh">'</span><span class="s">base_short.png</span><span class="sh">'</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Makes templates for rotational-deg=0...359 from base in TMPL_DIR.
    Saves rotated templates as tmpl{deg}.png in TMPL_DIR
    </span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">base</span> <span class="o">=</span> <span class="n">misc</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">TMPL_DIR</span><span class="p">,</span> <span class="n">base</span><span class="p">))</span>
    <span class="k">except</span> <span class="nb">IOError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Failed to make templates. Base template is not found</span><span class="sh">'</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="k">for</span> <span class="n">deg</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">360</span><span class="p">):</span>
        <span class="n">tmpl</span> <span class="o">=</span> <span class="n">ndimage</span><span class="p">.</span><span class="nf">rotate</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">deg</span><span class="p">)</span>
        <span class="n">misc</span><span class="p">.</span><span class="nf">imsave</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">TMPL_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">tmpl%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> <span class="n">tmpl</span><span class="p">)</span>
    <span class="k">return</span>


<span class="k">def</span> <span class="nf">make_masks</span><span class="p">():</span>
    <span class="sh">"""</span><span class="s"> Makes masks from tmpl{0...359}.png in TMPL_DIR.
    Saves masks as mask{0...359}.png in MASK_DIR
    </span><span class="sh">"""</span>
    <span class="k">for</span> <span class="n">deg</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">360</span><span class="p">):</span>
        <span class="n">tmpl</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">TMPL_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">tmpl%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> 
            <span class="n">cv2</span><span class="p">.</span><span class="n">IMREAD_GRAYSCALE</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">tmpl</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Failed to make mask {0}. tmpl{0}.png is not found.</span><span class="sh">'</span><span class="p">.</span>
                <span class="nf">format</span><span class="p">(</span><span class="n">deg</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">ret2</span><span class="p">,</span> <span class="n">mask</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">threshold</span><span class="p">(</span><span class="n">tmpl</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> 
                <span class="n">cv2</span><span class="p">.</span><span class="n">THRESH_BINARY</span><span class="o">+</span><span class="n">cv2</span><span class="p">.</span><span class="n">THRESH_OTSU</span><span class="p">)</span>
            <span class="n">cv2</span><span class="p">.</span><span class="nf">imwrite</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">MASK_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">mask%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> <span class="n">mask</span><span class="p">)</span>
    <span class="k">return</span>



<span class="k">def</span> <span class="nf">match_and_pickle</span><span class="p">(</span><span class="n">img_name</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Apply template matching to img_name in IMG_DIR, using
    tmpl{0...359}.png and mask{0...359}.png.
    
    Output: Coordinates of the top left corner of matching templates, 
    in the format [(deg, [points])], saved in img_name.pkl.
    </span><span class="sh">"""</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Matching img %s</span><span class="sh">'</span> <span class="o">%</span><span class="n">img_name</span><span class="p">)</span>
    <span class="n">img_rgb</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">STRIPPED_DIR</span><span class="p">,</span> <span class="n">img_name</span><span class="p">))</span>
    <span class="n">img_gray</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">img_rgb</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>
    <span class="n">matches</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">deg</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">360</span><span class="p">,</span> <span class="n">MATCH_RES</span><span class="p">):</span>
        <span class="n">tmpl</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">TMPL_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">tmpl%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> 
            <span class="n">cv2</span><span class="p">.</span><span class="n">IMREAD_GRAYSCALE</span><span class="p">)</span>
        <span class="n">mask</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">MASK_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">mask%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> 
            <span class="n">cv2</span><span class="p">.</span><span class="n">IMREAD_GRAYSCALE</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">tmpl</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">mask</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Failed to match for tmpl %d.</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">tmpl</span><span class="p">.</span><span class="n">shape</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">res</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">matchTemplate</span><span class="p">(</span><span class="n">img_gray</span><span class="p">,</span> <span class="n">tmpl</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">TM_SQDIFF</span><span class="p">,</span> <span class="n">mask</span><span class="o">=</span><span class="n">mask</span><span class="p">)</span>
            <span class="n">loc</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">res</span> <span class="o">&lt;</span> <span class="n">MATCH_THRESH</span><span class="p">)</span>
            <span class="n">pts</span> <span class="o">=</span> <span class="nf">zip</span><span class="p">(</span><span class="o">*</span><span class="n">loc</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>   <span class="c1">#top left corners of arrow bounding box
</span>            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">pts</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span>
                <span class="n">matches</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">deg</span><span class="p">,</span> <span class="n">pts</span><span class="p">))</span>
    <span class="n">file_name</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">PKL_DIR</span><span class="p">,</span>
        <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="sh">'</span><span class="s">.pkl</span><span class="sh">'</span><span class="p">)</span>  <span class="c1">#eg M21.pkl
</span>    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span><span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">matches</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
    <span class="k">return</span>


<span class="k">def</span> <span class="nf">match_all</span><span class="p">(</span><span class="n">num_processes</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Applies match() to images of name M{start ... start+num_images-1}s.jpg.

    This method uses multiprocessing:
    num_processes -- the number of parallel processes to spawn for this task.
    (default 2)
    </span><span class="sh">"""</span>
    <span class="n">imgs</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">STRIPPED_DIR</span><span class="p">)</span> <span class="k">if</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">M[0-9]*_s.jpg</span><span class="sh">'</span><span class="p">,</span> <span class="n">i</span><span class="p">)]</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Matching %d images</span><span class="sh">'</span> <span class="o">%</span><span class="nf">len</span><span class="p">(</span><span class="n">imgs</span><span class="p">))</span>
    <span class="n">pool</span> <span class="o">=</span> <span class="nc">Pool</span><span class="p">(</span><span class="n">num_processes</span><span class="p">)</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="n">match_and_pickle</span><span class="p">,</span> <span class="n">imgs</span><span class="p">)</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Done</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">return</span>


<span class="k">def</span> <span class="nf">draw_from_pkl</span><span class="p">(</span><span class="n">img_name</span><span class="p">,</span> <span class="n">output_path</span><span class="o">=</span><span class="sh">'</span><span class="s">./</span><span class="sh">'</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Draws bounding boxes on stripped ver of img_name with matches from
    img_name.pkl. 
    Saves output image in output_path.

    Example: draw_from_pkl(M21.jpg, </span><span class="sh">'</span><span class="s">./</span><span class="sh">'</span><span class="s">) draws boxes on M21_s.jpg, and 
    saves output as M21_r.jpg in the current directory.
    </span><span class="sh">"""</span>
    <span class="n">img_name</span> <span class="o">=</span> <span class="sh">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="sh">'</span><span class="s">_s.jpg</span><span class="sh">'</span>
    <span class="n">img_rgb</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">STRIPPED_DIR</span><span class="p">,</span> <span class="n">img_name</span><span class="p">))</span>
    <span class="n">pkl_name</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">PKL_DIR</span><span class="p">,</span>
        <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="sh">'</span><span class="s">.pkl</span><span class="sh">'</span><span class="p">)</span>  <span class="c1">#eg M21.pkl
</span>    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">pkl_name</span><span class="p">,</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">matches</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="nf">for </span><span class="p">(</span><span class="n">deg</span><span class="p">,</span> <span class="n">pts</span><span class="p">)</span> <span class="ow">in</span> <span class="n">matches</span><span class="p">:</span>
        <span class="n">tmpl</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">TMPL_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">tmpl%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> 
            <span class="n">cv2</span><span class="p">.</span><span class="n">IMREAD_GRAYSCALE</span><span class="p">)</span>
        <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">tmpl</span><span class="p">.</span><span class="n">shape</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">pt</span> <span class="ow">in</span> <span class="n">pts</span><span class="p">:</span>
            <span class="n">cv2</span><span class="p">.</span><span class="nf">rectangle</span><span class="p">(</span><span class="n">img_rgb</span><span class="p">,</span> <span class="n">pt</span><span class="p">,</span> <span class="p">(</span><span class="n">pt</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">w</span><span class="p">,</span> <span class="n">pt</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">h</span><span class="p">),</span> <span class="n">CI</span><span class="p">.</span><span class="nf">next</span><span class="p">(),</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">img_name</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">cv2</span><span class="p">.</span><span class="nf">imwrite</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">output_path</span><span class="p">,</span> <span class="n">img_name</span><span class="o">+</span><span class="sh">'</span><span class="s">_r.jpg</span><span class="sh">'</span><span class="p">),</span> <span class="n">img_rgb</span><span class="p">)</span>  <span class="c1">#eg M21_r.jpg
</span>

<span class="k">def</span> <span class="nf">transform</span><span class="p">(</span><span class="n">matches</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Transforms a list of (deg * coordinate list), where the coordinates
    are of the top-left corner of the tmpl bounding boxes, to a list containting
    the coordinates of the tips of the arrows.
    Returns the list of transformed coordinates.
    </span><span class="sh">"""</span>
    <span class="n">tips</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="nf">for </span><span class="p">(</span><span class="n">deg</span><span class="p">,</span> <span class="n">pts</span><span class="p">)</span> <span class="ow">in</span> <span class="n">matches</span><span class="p">:</span>
        <span class="n">tmpl</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">TMPL_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">tmpl%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">tmpl</span><span class="p">.</span><span class="n">shape</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">rad</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="nf">radians</span><span class="p">(</span><span class="n">deg</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">pt</span> <span class="ow">in</span> <span class="n">pts</span><span class="p">:</span>   <span class="c1">#top left corner of arrow bounding box
</span>            <span class="p">(</span><span class="n">cx</span><span class="p">,</span> <span class="n">cy</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">pt</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">w</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">pt</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">h</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>  <span class="c1">#center of the arrow
</span>            <span class="n">tips</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="nf">int</span><span class="p">(</span><span class="n">cx</span> <span class="o">-</span> <span class="n">RADIUS</span><span class="o">*</span><span class="n">math</span><span class="p">.</span><span class="nf">cos</span><span class="p">(</span><span class="n">rad</span><span class="p">)),</span> <span class="nf">int</span><span class="p">(</span><span class="n">cy</span> <span class="o">+</span> <span class="n">RADIUS</span><span class="o">*</span><span class="n">math</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">rad</span><span class="p">))))</span>
    <span class="k">return</span> <span class="n">tips</span>


<span class="k">def</span> <span class="nf">coalesce</span><span class="p">(</span><span class="n">tips</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Reduces points close to together in tips into one point.
    Returns the list of reduced points.
    </span><span class="sh">"""</span>
    <span class="n">thresh</span> <span class="o">=</span> <span class="mi">7</span>
    
    <span class="k">def</span> <span class="nf">not_distinct</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span> <span class="n">p2</span><span class="p">):</span>
        <span class="p">(</span><span class="n">p1x</span><span class="p">,</span> <span class="n">p1y</span><span class="p">)</span> <span class="o">=</span> <span class="n">p1</span>
        <span class="p">(</span><span class="n">p2x</span><span class="p">,</span> <span class="n">p2y</span><span class="p">)</span> <span class="o">=</span> <span class="n">p2</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">p1x</span><span class="o">-</span><span class="n">p2x</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="n">p1y</span><span class="o">-</span><span class="n">p2y</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">&lt;=</span> <span class="n">thresh</span><span class="o">**</span><span class="mi">2</span> 

    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">pt</span><span class="p">,</span> <span class="n">distinct_pts</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">dpt</span> <span class="ow">in</span> <span class="n">distinct_pts</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">not_distinct</span><span class="p">(</span><span class="n">pt</span><span class="p">,</span> <span class="n">dpt</span><span class="p">):</span>
                <span class="k">return</span>
        <span class="n">distinct_pts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">pt</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">tips</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">tips</span>
    <span class="n">distinct_pts</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">pt</span> <span class="ow">in</span> <span class="n">tips</span><span class="p">:</span>
        <span class="nf">update</span><span class="p">(</span><span class="n">pt</span><span class="p">,</span> <span class="n">distinct_pts</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">distinct_pts</span>


<span class="k">def</span> <span class="nf">transform_and_coalesce</span><span class="p">(</span><span class="n">img_name</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Applies transform() and coalesce() on data from the pickle file
    of img_name. E.g. M21.pkl from PKL_DIR
    Saves output as a csv file. E.g. M21.csv
    </span><span class="sh">"""</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Transforming for image %s</span><span class="sh">'</span> <span class="o">%</span><span class="n">img_name</span><span class="p">)</span>
    <span class="n">pkl_name</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="sh">'</span><span class="s">.pkl</span><span class="sh">'</span>  <span class="c1">#eg M21.pkl
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">PKL_DIR</span><span class="p">,</span> <span class="n">pkl_name</span><span class="p">),</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">matches</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">IOError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Failed to transform img %s. pkl file not found.</span><span class="sh">'</span> <span class="o">%</span><span class="n">img_name</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="n">tips</span> <span class="o">=</span> <span class="nf">coalesce</span><span class="p">(</span><span class="nf">transform</span><span class="p">(</span><span class="n">matches</span><span class="p">))</span>
    <span class="c1">#Write into csv
</span>    <span class="n">csv_name</span> <span class="o">=</span> <span class="sh">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="sh">'</span><span class="s">.csv</span><span class="sh">'</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">LOC_DIR</span><span class="p">,</span> <span class="n">csv_name</span><span class="p">),</span><span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">wr</span> <span class="o">=</span> <span class="n">csv</span><span class="p">.</span><span class="nf">writer</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
        <span class="n">wr</span><span class="p">.</span><span class="nf">writerow</span><span class="p">([</span><span class="nf">len</span><span class="p">(</span><span class="n">tips</span><span class="p">)])</span>  <span class="c1">#1st line is number of arrows
</span>        <span class="k">for</span> <span class="n">pt</span> <span class="ow">in</span> <span class="n">tips</span><span class="p">:</span>
            <span class="n">wr</span><span class="p">.</span><span class="nf">writerow</span><span class="p">(</span><span class="n">pt</span><span class="p">)</span>
    <span class="k">return</span>
        

<span class="k">def</span> <span class="nf">transform_and_coalesce_all</span><span class="p">(</span><span class="n">num_processes</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">Applies transform_and_coalesce() to images of name 
    M{start ... start+num_images-1}s.jpg.

    This method uses multiprocessing:
    num_processes -- the number of parallel processes to spawn for this task.
    (default 2)
    </span><span class="sh">"""</span>
    <span class="n">imgs</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">IMG_DIR</span><span class="p">)</span> <span class="k">if</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">M[0-9]*.jpg</span><span class="sh">'</span><span class="p">,</span> <span class="n">i</span><span class="p">)]</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Transforming %d images</span><span class="sh">'</span> <span class="o">%</span><span class="nf">len</span><span class="p">(</span><span class="n">imgs</span><span class="p">))</span>
    <span class="n">pool</span> <span class="o">=</span> <span class="nc">Pool</span><span class="p">(</span><span class="n">num_processes</span><span class="p">)</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="n">transform_and_coalesce</span><span class="p">,</span> <span class="n">imgs</span><span class="p">)</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Done</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">return</span>


<span class="k">def</span> <span class="nf">plot</span><span class="p">(</span><span class="n">img_name</span><span class="p">,</span> <span class="n">output_path</span><span class="o">=</span><span class="sh">'</span><span class="s">plots</span><span class="sh">'</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Plotting image %s</span><span class="sh">'</span> <span class="o">%</span><span class="n">img_name</span><span class="p">)</span>
    <span class="n">img_rgb</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">IMG_DIR</span><span class="p">,</span> <span class="n">img_name</span><span class="p">))</span>
    <span class="n">csv_name</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="sh">'</span><span class="s">.csv</span><span class="sh">'</span>  <span class="c1">#eg M21.pkl
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">LOC_DIR</span><span class="p">,</span> <span class="n">csv_name</span><span class="p">),</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">rd</span> <span class="o">=</span> <span class="n">csv</span><span class="p">.</span><span class="nf">reader</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
            <span class="n">num</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">rd</span><span class="p">.</span><span class="nf">next</span><span class="p">()[</span><span class="mi">0</span><span class="p">])</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
                <span class="n">pt_str</span> <span class="o">=</span> <span class="n">rd</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span>
                <span class="n">pt</span> <span class="o">=</span> <span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">pt_str</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nf">int</span><span class="p">(</span><span class="n">pt_str</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
                <span class="n">cv2</span><span class="p">.</span><span class="nf">drawMarker</span><span class="p">(</span><span class="n">img_rgb</span><span class="p">,</span> <span class="n">pt</span><span class="p">,</span> <span class="n">CI</span><span class="p">.</span><span class="nf">next</span><span class="p">(),</span> <span class="n">cv2</span><span class="p">.</span><span class="n">MARKER_CROSS</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
            <span class="n">cv2</span><span class="p">.</span><span class="nf">putText</span><span class="p">(</span><span class="n">img_rgb</span><span class="p">,</span> <span class="nf">str</span><span class="p">(</span><span class="n">num</span><span class="p">),</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">800</span><span class="p">),</span> <span class="n">cv2</span><span class="p">.</span><span class="n">FONT_HERSHEY_SIMPLEX</span><span class="p">,</span> <span class="mi">2</span><span class="p">,(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">),</span><span class="mi">2</span><span class="p">,</span><span class="n">cv2</span><span class="p">.</span><span class="n">LINE_AA</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">IOError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Failed to plot img %s. pkl file not found.</span><span class="sh">'</span> <span class="o">%</span><span class="n">img_name</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="n">out_name</span> <span class="o">=</span> <span class="sh">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="sh">'</span><span class="s">_p.jpg</span><span class="sh">'</span>
    <span class="n">out</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">output_path</span><span class="p">,</span> <span class="n">out_name</span><span class="p">)</span>
    <span class="n">cv2</span><span class="p">.</span><span class="nf">imwrite</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">img_rgb</span><span class="p">)</span>  <span class="c1">#eg M21_p.jpg
</span>

<span class="k">def</span> <span class="nf">plot_label</span><span class="p">(</span><span class="n">img_name</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Plotting image %s</span><span class="sh">'</span> <span class="o">%</span><span class="n">img_name</span><span class="p">)</span>
    <span class="n">csv_name</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="sh">'</span><span class="s">.csv</span><span class="sh">'</span>  <span class="c1">#eg M21.pkl
</span>    <span class="n">img_name</span> <span class="o">=</span> <span class="sh">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="sh">'</span><span class="s">_s.jpg</span><span class="sh">'</span>
    <span class="n">img_rgb</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">STRIPPED_DIR</span><span class="p">,</span> <span class="n">img_name</span><span class="p">))</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">LOC_DIR</span><span class="p">,</span> <span class="n">csv_name</span><span class="p">),</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">rd</span> <span class="o">=</span> <span class="n">csv</span><span class="p">.</span><span class="nf">reader</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
            <span class="n">num</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">rd</span><span class="p">.</span><span class="nf">next</span><span class="p">()[</span><span class="mi">0</span><span class="p">])</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
                <span class="n">pt_str</span> <span class="o">=</span> <span class="n">rd</span><span class="p">.</span><span class="nf">next</span><span class="p">()</span>
                <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">pt_str</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nf">int</span><span class="p">(</span><span class="n">pt_str</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
                <span class="n">cv2</span><span class="p">.</span><span class="nf">drawMarker</span><span class="p">(</span><span class="n">img_rgb</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">),</span> <span class="n">cv2</span><span class="p">.</span><span class="n">MARKER_CROSS</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
                <span class="n">cv2</span><span class="p">.</span><span class="nf">putText</span><span class="p">(</span><span class="n">img_rgb</span><span class="p">,</span> <span class="nf">str</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)),</span> <span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="mi">10</span><span class="p">,</span> <span class="n">y</span><span class="o">+</span><span class="mi">70</span><span class="p">),</span> <span class="n">cv2</span><span class="p">.</span><span class="n">FONT_HERSHEY_SIMPLEX</span><span class="p">,</span> <span class="mi">1</span><span class="p">,(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">),</span><span class="mi">2</span><span class="p">,</span><span class="n">cv2</span><span class="p">.</span><span class="n">LINE_AA</span><span class="p">)</span>
            <span class="n">cv2</span><span class="p">.</span><span class="nf">putText</span><span class="p">(</span><span class="n">img_rgb</span><span class="p">,</span> <span class="nf">str</span><span class="p">(</span><span class="n">num</span><span class="p">),</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">800</span><span class="p">),</span> <span class="n">cv2</span><span class="p">.</span><span class="n">FONT_HERSHEY_SIMPLEX</span><span class="p">,</span> <span class="mi">2</span><span class="p">,(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">),</span><span class="mi">2</span><span class="p">,</span><span class="n">cv2</span><span class="p">.</span><span class="n">LINE_AA</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">IOError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Failed to plot img %s. pkl file not found.</span><span class="sh">'</span> <span class="o">%</span><span class="n">img_name</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="n">out</span> <span class="o">=</span> <span class="sh">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">+</span><span class="sh">'</span><span class="s">_p.jpg</span><span class="sh">'</span>
    <span class="n">cv2</span><span class="p">.</span><span class="nf">imwrite</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">img_rgb</span><span class="p">)</span>  <span class="c1">#eg M21_p.jpg
</span>

<span class="k">def</span> <span class="nf">plot_all</span><span class="p">(</span><span class="n">num_processes</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
    <span class="n">imgs</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">IMG_DIR</span><span class="p">)</span> <span class="k">if</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">M[0-9]*.jpg</span><span class="sh">'</span><span class="p">,</span> <span class="n">i</span><span class="p">)]</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Plotting %d images</span><span class="sh">'</span> <span class="o">%</span><span class="nf">len</span><span class="p">(</span><span class="n">imgs</span><span class="p">))</span>
    <span class="n">pool</span> <span class="o">=</span> <span class="nc">Pool</span><span class="p">(</span><span class="n">num_processes</span><span class="p">)</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="n">plot</span><span class="p">,</span> <span class="n">imgs</span><span class="p">)</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Done</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">return</span>
</code></pre></div></div>]]></content><author><name>Nuda &quot;Tony&quot; Zhang</name><email>nudzhang@umich.edu</email></author><summary type="html"><![CDATA[A detailed two-part series about extracting machine-usable data from raw images. Part 2 using data from part 1 and some geometry to locate POIs.]]></summary></entry><entry><title type="html">Mitosis Image Processing Part 1 - Template Matching Using OpenCV</title><link href="https://tonyzhangnd.github.io/2017/07/Mitosis-Image-Processing-1.html" rel="alternate" type="text/html" title="Mitosis Image Processing Part 1 - Template Matching Using OpenCV" /><published>2017-07-05T00:00:00-04:00</published><updated>2017-07-05T00:00:00-04:00</updated><id>https://tonyzhangnd.github.io/2017/07/Mitosis%20Image%20Processing%201</id><content type="html" xml:base="https://tonyzhangnd.github.io/2017/07/Mitosis-Image-Processing-1.html"><![CDATA[<p><img src="/assets/images/template-matching/header-short.png" alt="Before-after image" /></p>
<aside class="sidebar__right">
<nav class="toc">
    <header><h4 class="nav__title"><i class="fas fa-file-alt"></i> Table of Contents</h4></header>
<ul class="toc__menu" id="markdown-toc">
  <li><a href="#todays-awesome-problem" id="markdown-toc-todays-awesome-problem">Today’s Awesome Problem</a></li>
  <li><a href="#i-have-no-clue-but-thats-awesome" id="markdown-toc-i-have-no-clue-but-thats-awesome">I Have No Clue, But That’s Awesome</a></li>
  <li><a href="#writing-the-algorithm" id="markdown-toc-writing-the-algorithm">Writing the Algorithm</a></li>
  <li><a href="#conclusion" id="markdown-toc-conclusion">Conclusion</a></li>
  <li><a href="#complete-code" id="markdown-toc-complete-code">Complete Code</a></li>
  <li><a href="#list-of-references" id="markdown-toc-list-of-references">List of references</a></li>
</ul>

  </nav>
</aside>
<p>After my first task of developing the Django web application at my summer internship, my second project, to my great excitement, is a lot more algorithmically involved. It involves processing raw data annotations into a format suitable for training Machine Learning algorithms.</p>

<p>Here’s the preamble. My research group is working on training a neural network to detect mitosis (cell division) in breast cancer histological images (See <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3709417/">ICPR 2012 Mitosis Detection Contest</a>). Apparently, mitosis count is a good measurement of the aggressiveness of cancer tumors. But mitosis detection is a very challenging task for a computer, because of its indistinctness and its variability. To the untrained eye, such as mine, a cell undergoing mitosis also looks pretty much the same as a regular cell. There are also four stages of mitosis, each with a different shape configuration. My future work involves improving our mitosis detection model. Exciting, but that is a job for another day.</p>

<h2 id="todays-awesome-problem">Today’s Awesome Problem</h2>
<p>Equally awesome is my current undertaking. Since this is another collaboration between IHPC and one of Singapore’s hospitals, we are training our neural net using data provided by our partner. However, the data was annotated in a very raw format, in the form of these:</p>

<p><img src="/assets/images/template-matching/M21.jpg" alt="Original training image" />
<em>Training data in its original form</em></p>

<p>The pain was two-fold. One, individual cells used for training must be cropped by hand. Two, the neural net would output of a set of pixel coordinates, and having no coordinate information, it was again up to the human eye to compare it to the images with green arrows.</p>

<p>I’m thus armed with the following goal:</p>

<ul>
  <li>Write a program that, given an image with green arrows, outputs the pixel coordinates of where the arrows are pointing.</li>
</ul>

<h2 id="i-have-no-clue-but-thats-awesome">I Have No Clue, But That’s Awesome</h2>
<p>I absolutely love this problem for two reasons: One, it’s meaningful as it drastically reduces human workload. Two, it’s a problem where I have no frickin’ clue how to solve, which in other words, mean it’s the best chance to learn something new!</p>

<p>It is indeed trivial to find the color green in the images. But I need to know where the arrows are pointing, which requires knowing their orientation. I soon realized this is a lot more involved than finding green. Also, I happen to have zero computer vision experience. However, having no clue is what inspires me to tackle a problem, and I quickly set to work figuring out a line of attack.</p>

<p>My first thought was to use a neural net, which I will train to give me the locations of arrow tips. But this felt like a bad solution because it requires a lot of knob-tuning, and it’s a black box.</p>

<p>Computer Vision whizzes on Quora pointed me in the right direction: Template Matching! Initially, I was thrown off by the fact that my arrows had different orientations. Did I have to implement a method that was rotationally-invariant? (<a href="https://link.springer.com/chapter/10.1007/978-3-540-77129-6_13">Kim &amp; Araujo, 2007</a>) In the end, I went with a simple solution that avoided such overkill. I had 360 templates, one for each degree of rotation, and use the template matching methods in openCV.</p>

<p>This would help me place bounding boxes on arrows, as well as the rotation information of the arrows. With a bit of trigonometry, I can then extract information about the actual location the arrows are pointing.</p>

<h2 id="writing-the-algorithm">Writing the Algorithm</h2>
<p>My template matching algorithm is summarized as so:</p>

<ol>
  <li>Strip the background from the images. This improves matching by removing distracting elements.</li>
  <li>Make 360 templates, one for each degree of rotation.</li>
  <li>Match each image with 360 templates. (Fortunately, this is fairly fast for my small templates. Also probably faster rotational-invariant feature matching techniques, which I saw people complain on StackOverflow to be painfully slow)</li>
  <li>Knowing the match locations and orientations, I can transform the points to recover the final location of arrow tips (I will talk about this in Part 2)</li>
</ol>

<p>Step 1 is trivial, as all the images had the same shade of green arrows. All I had to do was zero the non-green vectors in the RGBA matrix. I also did some parallel processing to speed this up for bulk processing of images (see complete code at bottom of page). Step 2 was likewise easy using SciPy, with this as my base template:<br />
<img src="/assets/images/template-matching/base.png" alt="Base template" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">scipy</span> <span class="kn">import</span> <span class="n">misc</span><span class="p">,</span> <span class="n">ndimage</span>

<span class="n">IMG_DIR</span> <span class="o">=</span> <span class="p">{</span><span class="n">path</span> <span class="n">to</span> <span class="n">original</span> <span class="n">images</span><span class="p">}</span>
<span class="n">STRIPPED_DIR</span> <span class="o">=</span> <span class="p">{</span><span class="n">path</span> <span class="n">to</span> <span class="n">save</span> <span class="n">stripped</span> <span class="n">images</span><span class="p">}</span>
<span class="n">TMPL_DIR</span> <span class="o">=</span> <span class="p">{</span><span class="n">path</span> <span class="n">to</span> <span class="n">templates</span><span class="p">}</span>

<span class="n">GREEN</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">89</span><span class="p">,</span> <span class="mi">248</span><span class="p">,</span>  <span class="mi">89</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">strip</span><span class="p">(</span><span class="n">img_name</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Removes background from img_name in IMG_DIR, leaving only green arrows.
    Saves stripped image in STRIPPED_DIR, as img_name</span><span class="sh">'</span><span class="s">s</span><span class="sh">'</span><span class="s">.jpg 
    </span><span class="sh">"""</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Stripping img %s</span><span class="sh">'</span> <span class="o">%</span><span class="n">img_name</span><span class="p">)</span>
    <span class="n">arr</span> <span class="o">=</span> <span class="n">misc</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">IMG_DIR</span><span class="p">,</span> <span class="n">img_name</span><span class="p">))</span>
    <span class="p">(</span><span class="n">x_size</span><span class="p">,</span> <span class="n">y_size</span><span class="p">,</span> <span class="n">z_size</span><span class="p">)</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">shape</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">x_size</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">y_size</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">np</span><span class="p">.</span><span class="nf">array_equal</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">],</span> <span class="n">GREEN</span><span class="p">):</span>
                <span class="n">arr</span><span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
    <span class="n">img_name</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">misc</span><span class="p">.</span><span class="nf">imsave</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">STRIPPED_DIR</span><span class="p">,</span> <span class="n">img_name</span><span class="o">+</span><span class="sh">'</span><span class="s">_s.jpg</span><span class="sh">'</span><span class="p">),</span> <span class="n">arr</span><span class="p">)</span> <span class="c1">#eg M21_s.jpg
</span>    <span class="k">return</span>

<span class="k">def</span> <span class="nf">make_templates</span><span class="p">(</span><span class="n">base</span><span class="o">=</span><span class="sh">'</span><span class="s">base.png</span><span class="sh">'</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Makes templates for rotational-deg=0...359 from base in TMPL_DIR.
    Saves rotated templates as tmpl{deg}.png in TMPL_DIR
    </span><span class="sh">"""</span>
    <span class="n">base</span> <span class="o">=</span> <span class="n">misc</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">TMPL_DIR</span><span class="p">,</span> <span class="n">base</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">deg</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">360</span><span class="p">):</span>
        <span class="n">tmpl</span> <span class="o">=</span> <span class="n">ndimage</span><span class="p">.</span><span class="nf">rotate</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">deg</span><span class="p">)</span>
        <span class="n">misc</span><span class="p">.</span><span class="nf">imsave</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">TMPL_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">tmpl%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> <span class="n">tmpl</span><span class="p">)</span>
    <span class="k">return</span>
</code></pre></div></div>

<p>Next, following this <a href="http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_template_matching/py_template_matching.html">wonderful tutorial</a>, I had step 3 functioning in no time. The algorithm uses the <code class="language-plaintext highlighter-rouge">cv2.TM_CCORR_NORMED</code> method on greyscaled images, with a match-acceptance threshold of <code class="language-plaintext highlighter-rouge">&gt;0.9</code>. It worked 99% of the time. But, in accordance with the power law of programming, that remaining 1% gave the biggest headache. Some edge cases gave me unacceptable false negatives:</p>

<p><img src="/assets/images/template-matching/falseneg.png" alt="False Negatives" /><br />
<em>False negatives (cv2.TM_CCORR_NORMED, acceptance threshold &gt;0.9)</em></p>

<p>I could simply lower the threshold, but that gave me a ton of false positives before all the ground truths (ML lingo for the “real, actual positives”) were accepted. Due to the nature of the problem, it had to work 100%, and I needed a perfect solution.</p>

<p>I realized the problem was due to the proximity of the arrows, such that they would overlap with the back region of the templates during matching. The black background in the templates must be somehow excluded from the correlation.</p>

<p>To my dismay, openCV does not support alpha-dependent matching. As reluctant as I was to reinvent the wheel, I mentally prepared myself to write my own matching algorithm.</p>

<p>But then I stumbled upon an article about a new masking feature for openCV 3.2 in C. Aha! I couldn’t find useful information because there simply wasn’t documentation for openCV 3.2 for Python! Masks were my solution.</p>

<p>To create masks for each template, I used openCV’s <a href="http://docs.opencv.org/trunk/d7/d4d/tutorial_py_thresholding.html">thresholding feature</a>, which converted my templates from grayscale to black and white. The black regions acted as the “opaque” mask, allowing the white “transparent” regions to be factored into the correlation calculations.</p>

<p><img src="/assets/images/template-matching/mask.png" alt="Mask" /><br />
<em>Example of a template after thresholding</em></p>

<p>Tuning the masks to work with openCV’s <code class="language-plaintext highlighter-rouge">matchTemplate()</code> method was another issue for me. Although <code class="language-plaintext highlighter-rouge">TM_CCORR_NORMED</code> now correctly identified my true positives, it gave me false positives that are even stronger than the true ones.</p>

<p><img src="/assets/images/template-matching/falsepos.png" alt="False positives" /><br />
<em>False positives (cv2.TM_CCORR_NORMED, acceptance threshold &gt;0.9)</em></p>

<p>To this end, the wonderful folks on <a href="https://stackoverflow.com/questions/44690002/python-opencv-matchtemplate-on-grayscale-image-with-masking/44693722?noredirect=1#comment76390884_44693722]">StackOverflow helped me tremendously</a>. Using, the matching method <code class="language-plaintext highlighter-rouge">TM_SQDIFF</code> and a new threshold of <code class="language-plaintext highlighter-rouge">&lt;11</code> (empirically tuned), and using png templates and masks instead of jpeg did the trick. Note that non-matches have correlation of <code class="language-plaintext highlighter-rouge">&gt;200</code>, so a acceptance threshold of 11 is really good.</p>

<p><img src="/assets/images/template-matching/M21_r.jpg" alt="Success" /><br />
<em>Success! (cv2.TM_SQDIFF, acceptance threshold &lt;11)</em></p>

<p>Cool was learning why <code class="language-plaintext highlighter-rouge">TM_CCORR_NORMED</code> did not work with jpeg.</p>

\[R_{\textrm{ccorr normed}}(x, y) = \frac{\sum_{x',y'}(T(x', y') \cdotp I(x+x', y+y'))}{\sqrt{\sum_{x',y'}T(x', y')^2 \cdotp I(x+x', y+y')^2}}\]

\[R_{\textrm{sqdiff}}(x, y) = \sum_{x', y'}(T'(x', y') \cdotp I(x+x', y+y'))\]

<p>Because <code class="language-plaintext highlighter-rouge">TM_CCORR_NORMED</code> is a normalized function with the denominator that it has, the black backgrounds meant I was dividing by 0 in many cases. This is not cool, but having a matrix entry of <code class="language-plaintext highlighter-rouge">numpy.nan</code> wasn’t the issue because the comparison <code class="language-plaintext highlighter-rouge">nan&gt;threshold</code> yields false. The key was with the jpeg format. Because of lossy jpeg compression, entries that should have been 0 (black), were not. This gave me very small denominators, causing the correlation to blow up and give me false positives. This is why png masks, or using <code class="language-plaintext highlighter-rouge">TM_SQDIFF</code> which does not have the denominator, fixes the problem.</p>

<p>Here is the end result and code, using <code class="language-plaintext highlighter-rouge">TM_SQDIFF</code> and png masks:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">cv2</span>

<span class="n">MASK_DIR</span> <span class="o">=</span> <span class="p">{</span><span class="n">path</span> <span class="n">to</span> <span class="n">masks</span><span class="p">}</span>
<span class="n">RES_DIR</span> <span class="o">=</span> <span class="p">{</span><span class="n">path</span> <span class="n">to</span> <span class="n">save</span> <span class="n">match</span> <span class="n">results</span><span class="p">}</span>

<span class="n">MATCH_THRESH</span> <span class="o">=</span> <span class="mi">11</span>
<span class="n">MATCH_RES</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1">#specifies degree-interval at which to match
#Match thresholds and resolution were empirically tuned
</span>
<span class="k">def</span> <span class="nf">make_masks</span><span class="p">():</span>
    <span class="sh">"""</span><span class="s"> Makes masks from tmpl{0...359}.png in TMPL_DIR.
    Saves masks as mask{0...359}.png in MASK_DIR
    </span><span class="sh">"""</span>
    <span class="k">for</span> <span class="n">deg</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">360</span><span class="p">):</span>
        <span class="n">tmpl</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">TMPL_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">tmpl%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> 
            <span class="n">cv2</span><span class="p">.</span><span class="n">IMREAD_GRAYSCALE</span><span class="p">)</span>
        <span class="n">ret2</span><span class="p">,</span> <span class="n">mask</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">threshold</span><span class="p">(</span><span class="n">tmpl</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> 
            <span class="n">cv2</span><span class="p">.</span><span class="n">THRESH_BINARY</span><span class="o">+</span><span class="n">cv2</span><span class="p">.</span><span class="n">THRESH_OTSU</span><span class="p">)</span>
        <span class="n">cv2</span><span class="p">.</span><span class="nf">imwrite</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">MASK_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">mask%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> <span class="n">mask</span><span class="p">)</span>
    <span class="k">return</span>

<span class="k">def</span> <span class="nf">match_and_draw</span><span class="p">(</span><span class="n">img_name</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Apply template matching to img_name in IMG_DIR, using
    tmpl{0...359}.png and mask{0...359}.png.
    Saves result with boxes drawn around matches as as img_name</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="s">.jpg in RES_DIR
    </span><span class="sh">"""</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Matching img %s</span><span class="sh">'</span> <span class="o">%</span><span class="n">img_name</span><span class="p">)</span>
    <span class="n">img_rgb</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">STRIPPED_DIR</span><span class="p">,</span> <span class="n">img_name</span><span class="p">))</span>	<span class="n">img_gray</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">img_rgb</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">deg</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">360</span><span class="p">,</span> <span class="n">MATCH_RES</span><span class="p">):</span>
        <span class="n">tmpl</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">TMPL_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">tmpl%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> 
            <span class="n">cv2</span><span class="p">.</span><span class="n">IMREAD_GRAYSCALE</span><span class="p">)</span>
        <span class="n">mask</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">MASK_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">mask%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> 
            <span class="n">cv2</span><span class="p">.</span><span class="n">IMREAD_GRAYSCALE</span><span class="p">)</span>

        <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">tmpl</span><span class="p">.</span><span class="n">shape</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">matchTemplate</span><span class="p">(</span><span class="n">img_gray</span><span class="p">,</span> <span class="n">tmpl</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">TM_SQDIFF</span><span class="p">,</span> <span class="n">mask</span><span class="o">=</span><span class="n">mask</span><span class="p">)</span>
        <span class="n">loc</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">res</span> <span class="o">&lt;</span> <span class="n">MATCH_THRESH</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">pt</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="o">*</span><span class="n">loc</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]):</span>
            <span class="n">cv2</span><span class="p">.</span><span class="nf">rectangle</span><span class="p">(</span><span class="n">img_rgb</span><span class="p">,</span> <span class="n">pt</span><span class="p">,</span> <span class="p">(</span><span class="n">pt</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">w</span><span class="p">,</span> <span class="n">pt</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">h</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Match for deg{}, pt({}, {}), sqdiff {}</span><span class="sh">'</span><span class="p">.</span>
                <span class="nf">format</span><span class="p">(</span><span class="n">deg</span><span class="p">,</span><span class="n">pt</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">pt</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">res</span><span class="p">[</span><span class="n">pt</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">pt</span><span class="p">[</span><span class="mi">0</span><span class="p">]]))</span>
    <span class="n">img_name</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">cv2</span><span class="p">.</span><span class="nf">imwrite</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">RES_DIR</span><span class="p">,</span> <span class="n">img_name</span><span class="o">+</span><span class="sh">'</span><span class="s">_r.jpg</span><span class="sh">'</span><span class="p">),</span> <span class="n">img_rgb</span><span class="p">)</span> <span class="c1">#eg M21_r.jpg
</span>    <span class="k">return</span>
</code></pre></div></div>

<p>Again, a method for bulk processing of images is in the complete code at the bottom of this page.</p>

<h2 id="conclusion">Conclusion</h2>
<p>Now, I have completed my first goal of locating all the arrows. Of course, the current code only finds and draws bounding boxes on images, which is useful for debugging purposes. It is easy to modify my code to extract the coordinates of the boxes, which tells me roughly where my arrows are (the top left corner of the boxes are given by the <code class="language-plaintext highlighter-rouge">pt</code> variable in the code block above).</p>

<p>My next step is to transform these points, using the orientation information of the matching templates, into pixels that the arrows point to, which will be our ground truth. This doesn’t have to be exact of course, since we only need to tell our neural net roughly where to look, and if the ground-truth pixel is within the patch returned by the neural net.</p>

<p>Also, notice that the current program may output a couple of matching points for each arrow. I would need to coalesce these points into a single point for an accurate mitosis count. I will talk about my point transformation and coalescing algorithm in <strong>Part 2</strong>!</p>

<h2 id="complete-code">Complete Code</h2>
<p>Below is the complete code for Part 1, with added error handling and print statements.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">cv2</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">scipy</span> <span class="kn">import</span> <span class="n">misc</span><span class="p">,</span> <span class="n">ndimage</span>
<span class="kn">from</span> <span class="n">multiprocessing</span> <span class="kn">import</span> <span class="n">Pool</span>

<span class="n">IMG_DIR</span> <span class="o">=</span> <span class="p">{</span><span class="n">path</span> <span class="n">to</span> <span class="n">original</span> <span class="n">images</span><span class="p">}</span>
<span class="n">STRIPPED_DIR</span> <span class="o">=</span> <span class="p">{</span><span class="n">path</span> <span class="n">to</span> <span class="n">save</span> <span class="n">stripped</span> <span class="n">images</span><span class="p">}</span>
<span class="n">TMPL_DIR</span> <span class="o">=</span> <span class="p">{</span><span class="n">path</span> <span class="n">to</span> <span class="n">templates</span><span class="p">}</span>
<span class="n">MASK_DIR</span> <span class="o">=</span> <span class="p">{</span><span class="n">path</span> <span class="n">to</span> <span class="n">masks</span><span class="p">}</span>
<span class="n">RES_DIR</span> <span class="o">=</span> <span class="p">{</span><span class="n">path</span> <span class="n">to</span> <span class="n">save</span> <span class="n">match</span> <span class="n">results</span><span class="p">}</span>

<span class="n">GREEN</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">89</span><span class="p">,</span> <span class="mi">248</span><span class="p">,</span>  <span class="mi">89</span><span class="p">])</span>
<span class="n">MATCH_THRESH</span> <span class="o">=</span> <span class="mi">11</span>
<span class="n">MATCH_RES</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1">#specifies degree-interval at which to match
#Match thresholds and resolution were empirically tuned
</span>
<span class="k">def</span> <span class="nf">strip</span><span class="p">(</span><span class="n">img_name</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Removes background from img_name in IMG_DIR, leaving only green arrows.
    Saves stripped image in STRIPPED_DIR, as img_name</span><span class="sh">'</span><span class="s">s</span><span class="sh">'</span><span class="s">.jpg </span><span class="sh">"""</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Stripping img %s</span><span class="sh">'</span> <span class="o">%</span><span class="n">img_name</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">arr</span> <span class="o">=</span> <span class="n">misc</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">IMG_DIR</span><span class="p">,</span> <span class="n">img_name</span><span class="p">))</span>
    <span class="k">except</span> <span class="nb">IOError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Failed to strip img %s. Image not found.</span><span class="sh">'</span> <span class="o">%</span><span class="n">img_name</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="p">(</span><span class="n">x_size</span><span class="p">,</span> <span class="n">y_size</span><span class="p">,</span> <span class="n">z_size</span><span class="p">)</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="n">shape</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">x_size</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">y_size</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">np</span><span class="p">.</span><span class="nf">array_equal</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">],</span> <span class="n">GREEN</span><span class="p">):</span>
                <span class="n">arr</span><span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">])</span>
    <span class="n">img_name</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">misc</span><span class="p">.</span><span class="nf">imsave</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">STRIPPED_DIR</span><span class="p">,</span> <span class="n">img_name</span><span class="o">+</span><span class="sh">'</span><span class="s">_s.jpg</span><span class="sh">'</span><span class="p">),</span> <span class="n">arr</span><span class="p">)</span> <span class="c1">#eg M21_s.jpg
</span>    <span class="k">return</span>

<span class="k">def</span> <span class="nf">strip_all</span><span class="p">(</span><span class="n">num_processes</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Applies strip() to all images in IMG_DIR.

    This method uses multiprocessing:
    num_processes -- the number of parallel processes to spawn for this task.
    (default 2)
    </span><span class="sh">"""</span>
    <span class="n">imgs</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">IMG_DIR</span><span class="p">)</span> <span class="k">if</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">M[0-9]*.jpg</span><span class="sh">'</span><span class="p">,</span> <span class="n">i</span><span class="p">)]</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Stripping background from %d images</span><span class="sh">'</span> <span class="o">%</span><span class="nf">len</span><span class="p">(</span><span class="n">imgs</span><span class="p">))</span>
    <span class="n">pool</span> <span class="o">=</span> <span class="nc">Pool</span><span class="p">(</span><span class="n">num_processes</span><span class="p">)</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="n">strip</span><span class="p">,</span> <span class="n">imgs</span><span class="p">)</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Done</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">return</span>

<span class="k">def</span> <span class="nf">make_templates</span><span class="p">():</span>
    <span class="sh">"""</span><span class="s"> Makes templates for rotational-deg=0...359 from base.jpg in TMPL_DIR.
    Saves rotated templates as tmpl{deg}.png in TMPL_DIR
    </span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">base</span> <span class="o">=</span> <span class="n">misc</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">TMPL_DIR</span><span class="p">,</span><span class="sh">'</span><span class="s">base_short.png</span><span class="sh">'</span><span class="p">))</span>
    <span class="k">except</span> <span class="nb">IOError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Failed to make templates. Base template is not found</span><span class="sh">'</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="k">for</span> <span class="n">deg</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">360</span><span class="p">):</span>
        <span class="n">tmpl</span> <span class="o">=</span> <span class="n">ndimage</span><span class="p">.</span><span class="nf">rotate</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">deg</span><span class="p">)</span>
        <span class="n">misc</span><span class="p">.</span><span class="nf">imsave</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">TMPL_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">tmpl%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> <span class="n">tmpl</span><span class="p">)</span>
    <span class="k">return</span>

<span class="k">def</span> <span class="nf">make_masks</span><span class="p">():</span>
    <span class="sh">"""</span><span class="s"> Makes masks from tmpl{0...359}.png in TMPL_DIR.
    Saves masks as mask{0...359}.png in MASK_DIR
    </span><span class="sh">"""</span>
    <span class="k">for</span> <span class="n">deg</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">360</span><span class="p">):</span>
        <span class="n">tmpl</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">TMPL_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">tmpl%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> 
            <span class="n">cv2</span><span class="p">.</span><span class="n">IMREAD_GRAYSCALE</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">tmpl</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Failed to make mask {0}. tmpl{0}.png is not found.</span><span class="sh">'</span><span class="p">.</span>
                <span class="nf">format</span><span class="p">(</span><span class="n">deg</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">ret2</span><span class="p">,</span> <span class="n">mask</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">threshold</span><span class="p">(</span><span class="n">tmpl</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> 
                <span class="n">cv2</span><span class="p">.</span><span class="n">THRESH_BINARY</span><span class="o">+</span><span class="n">cv2</span><span class="p">.</span><span class="n">THRESH_OTSU</span><span class="p">)</span>
            <span class="n">cv2</span><span class="p">.</span><span class="nf">imwrite</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">MASK_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">mask%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> <span class="n">mask</span><span class="p">)</span>
    <span class="k">return</span>

<span class="k">def</span> <span class="nf">match_and_draw</span><span class="p">(</span><span class="n">img_name</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Applies template matching to img_name in IMG_DIR, using
    tmpl{0...359}.png and mask{0...359}.png.
    Saves result with boxes drawn around matches as as img_name</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="s">.jpg in RES_DIR
    </span><span class="sh">"""</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Matching img %s</span><span class="sh">'</span> <span class="o">%</span><span class="n">img_name</span><span class="p">)</span>
    <span class="n">img_rgb</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">STRIPPED_DIR</span><span class="p">,</span> <span class="n">img_name</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">img_rgb</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Failed to match img %s. Image not found.</span><span class="sh">'</span> <span class="o">%</span><span class="n">img_name</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="n">img_gray</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">img_rgb</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">deg</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">360</span><span class="p">,</span> <span class="n">MATCH_RES</span><span class="p">):</span>
        <span class="n">tmpl</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">TMPL_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">tmpl%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> 
            <span class="n">cv2</span><span class="p">.</span><span class="n">IMREAD_GRAYSCALE</span><span class="p">)</span>
        <span class="n">mask</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">MASK_DIR</span><span class="p">,</span> <span class="sh">'</span><span class="s">mask%d.png</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">),</span> 
            <span class="n">cv2</span><span class="p">.</span><span class="n">IMREAD_GRAYSCALE</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">tmpl</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">mask</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Failed to match for tmpl %d.</span><span class="sh">'</span> <span class="o">%</span><span class="n">deg</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">tmpl</span><span class="p">.</span><span class="n">shape</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">res</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">matchTemplate</span><span class="p">(</span><span class="n">img_gray</span><span class="p">,</span> <span class="n">tmpl</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">TM_SQDIFF</span><span class="p">,</span> <span class="n">mask</span><span class="o">=</span><span class="n">mask</span><span class="p">)</span>
            <span class="n">loc</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">res</span> <span class="o">&lt;</span> <span class="n">MATCH_THRESH</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">pt</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="o">*</span><span class="n">loc</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]):</span>
                <span class="n">cv2</span><span class="p">.</span><span class="nf">rectangle</span><span class="p">(</span><span class="n">img_rgb</span><span class="p">,</span> <span class="n">pt</span><span class="p">,</span> <span class="p">(</span><span class="n">pt</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">w</span><span class="p">,</span> <span class="n">pt</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">h</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span>
                <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Match for deg{}, pt({}, {}), sqdiff {}</span><span class="sh">'</span><span class="p">.</span>
                    <span class="nf">format</span><span class="p">(</span><span class="n">deg</span><span class="p">,</span><span class="n">pt</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">pt</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">res</span><span class="p">[</span><span class="n">pt</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">pt</span><span class="p">[</span><span class="mi">0</span><span class="p">]]))</span>
    <span class="n">img_name</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">img_name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">cv2</span><span class="p">.</span><span class="nf">imwrite</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">RES_DIR</span><span class="p">,</span> <span class="n">img_name</span><span class="o">+</span><span class="sh">'</span><span class="s">_r.jpg</span><span class="sh">'</span><span class="p">),</span> <span class="n">img_rgb</span><span class="p">)</span> <span class="c1">#eg M21_r.jpg
</span>    <span class="k">return</span>

<span class="k">def</span> <span class="nf">match_all</span><span class="p">(</span><span class="n">num_imgs</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">num_processes</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Applies match() to all images in STRIPPED_DIR.

    This method uses multiprocessing:
    num_processes -- the number of parallel processes to spawn for this task.
    (default 2)
    </span><span class="sh">"""</span>
    <span class="n">imgs</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">STRIPPED_DIR</span><span class="p">)</span> <span class="k">if</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">M[0-9]*_s.jpg</span><span class="sh">'</span><span class="p">,</span> <span class="n">i</span><span class="p">)]</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Matching %d images</span><span class="sh">'</span> <span class="o">%</span><span class="nf">len</span><span class="p">(</span><span class="n">imgs</span><span class="p">))</span>
    <span class="n">pool</span> <span class="o">=</span> <span class="nc">Pool</span><span class="p">(</span><span class="n">num_processes</span><span class="p">)</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="n">match_and_draw</span><span class="p">,</span> <span class="n">imgs</span><span class="p">)</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="n">pool</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Done</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">return</span>
</code></pre></div></div>

<h2 id="list-of-references">List of references</h2>
<ol>
  <li><a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3709417/">ICPR 2012 Mitosis Detection Contest</a></li>
  <li><a href="https://link.springer.com/chapter/10.1007/978-3-540-77129-6_13">2007 Paper on Grayscale Template-Matching Invariant to Rotation, Scale, Translation, Brightness and Contrast (Kim &amp; Araujo)</a></li>
  <li><a href="http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_template_matching/py_template_matching.html">OpenCV template-matching tutorial in Python</a></li>
  <li><a href="http://docs.opencv.org/trunk/d7/d4d/tutorial_py_thresholding.html">OpenCV thresholding tutorial in Python</a></li>
  <li><a href="https://stackoverflow.com/questions/44690002/python-opencv-matchtemplate-on-grayscale-image-with-masking/44693722?noredirect=1#comment76390884_44693722]">Helpful StackOverflow explanation of OpenCV’s different matching methods</a></li>
</ol>]]></content><author><name>Nuda &quot;Tony&quot; Zhang</name><email>nudzhang@umich.edu</email></author><summary type="html"><![CDATA[A detailed two-part series about extracting machine-usable data from raw images. Part 1 focuses on placing bounding boxes on target features.]]></summary></entry><entry><title type="html">My Summer Internship and Writing My First Django App</title><link href="https://tonyzhangnd.github.io/2017/06/My-Summer-Internship-and-Writing-My-First-Django-App.html" rel="alternate" type="text/html" title="My Summer Internship and Writing My First Django App" /><published>2017-06-20T00:00:00-04:00</published><updated>2017-06-20T00:00:00-04:00</updated><id>https://tonyzhangnd.github.io/2017/06/My%20Summer%20Internship%20and%20Writing%20My%20First%20Django%20App</id><content type="html" xml:base="https://tonyzhangnd.github.io/2017/06/My-Summer-Internship-and-Writing-My-First-Django-App.html"><![CDATA[<h2 id="my-summer-position">My Summer Position</h2>
<p>This summer, I’m doing a research internship in sunny Singapore.  In particular, I’m working at the <a href="https://www.a-star.edu.sg/ihpc">Institute of High Performance Computing (IHPC),</a>  a research institute under the parent company that is the Agency for Science, Technology and Research, known as A*STAR.</p>

<p>To many who are probably unfamiliar, <a href="https://www.a-star.edu.sg">A*STAR</a> <em>“is Singapore’s lead public sector agency that spearheads economic-oriented research to advance scientific discovery and develop innovative technology”</em>. It’s a pretty cool environment, and I am working on some machine learning projects with my supervisor.</p>

<p>As an AI Research Intern, the projects in which I’m involved are mostly about automating patient diagnosis through Machine Learning and Computer Vision.</p>

<h2 id="my-first-django-web-app">My First Django Web App</h2>
<p>My first task this summer was to create a ‘proof-of-concept’ web application that would demonstrate to hospitals the use of a lung cancer identification algorithm our team developed.  This algorithm is a neural net that takes in a set of DICOM images. A dicom image (Digital Imaging and Communications in Medicine) is the standard output format for X-Ray and CAT scans. An image is 2-D slice, and a set of images from a CAT scan gives a 3-D rendering of,  say,  a lung. Our algorithm then spits out the xyz-coordinates of where the cancerous tumors might be located in said lung.</p>

<p>Tumor identification is traditionally done by the human eye, so it is hoped that our program can automate the process. What’s needed now is a web-based platform to serve our program to the customers. That is my job to build.</p>

<p>To my delight, there already exists an open-source medical image viewer in JavaScript lying around on GitHub. We fondly call it the <a href="https://github.com/rii-mango/Papaya">Papaya Viewer</a>. No need to reinvent the wheel then!</p>

<p>With a good overview of the problem, I could zoom in on the specifications. I need to develop a web-application that:</p>

<ol>
  <li>Lets the user upload a set of dicom files</li>
  <li>Runs our cancer-identification program server-side</li>
  <li>Displays the dicom images with Papaya, with additional buttons that let the user  zoom in onto regions identified by our detection algorithm.</li>
</ol>

<p>My web development being experience close to naught (this was before I built this website), I got to work looking up possible tools I could use. I knew it had to be dynamic application, so my choices included Ruby on Rails and Django. Since I fell in love with the <em>sheer awesomeness of Python</em> last semester writing OS projects (synchronization &amp; network programming), I went with Django. 
(I might do a future post about why I think Python is great, and why it replaced Java as my language of choice)</p>

<p>The amazing quality of Django’s documentation got me up to speed quickly, and a day of tutorials and fiddling later, I was quickly building my first web application.</p>

<p>I’d show you how beautiful it looks, but in reality though, it’s a proof-of-concept, and minimally viable demo, so we’re wasting no time dressing it up. It’s only crucial that it works. Which it wonderfully does.</p>

<h2 id="my-takeaways">My Takeaways</h2>
<p>But most important to me personally, is that I learned the process of creating and deploying a web application, such as url management, utilizing modularity in HTML templates, and how MVC is applied in web development.</p>

<p>I also learned what a framework like Django was about. It’s like the inverse of an API, where instead of you calling the the API, the framework calls your code (see <a href="https://martinfowler.com/articles/injection.html">Inversion of Control</a>). It’s an MVC pattern with the <em>C</em> already in place, and you only worry about the <em>M</em> and the <em>V</em>; a chef-for-hire where where you just provide the ingredients. It is awesome.</p>

<p>Django does seem a bit of an overkill for the present state of my application. After all, my site has only two pages, one for uploading, and one for viewing, which sounds like a couple of HTML and static files.</p>

<p>However, Django is made to be flexible and extensible. If I get the chance to return to this project, potential new features I want to add include a database to store patient data, visible to each authenticated user. And for that, Django is perfect.</p>]]></content><author><name>Nuda &quot;Tony&quot; Zhang</name><email>nudzhang@umich.edu</email></author><summary type="html"><![CDATA[A brief post about my AI research internship in Singapore, and learning to use Django to make my first web application.]]></summary></entry></feed>